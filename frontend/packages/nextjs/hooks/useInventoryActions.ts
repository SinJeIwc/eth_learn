import { useRef } from "react";
import { useFarmContracts } from "./useFarmContracts";
import { Item } from "@/types/farm";
import { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";
import { useInventoryStore } from "~~/stores/inventoryStore";
import { usePlantStore } from "~~/stores/plantStore";

export const useInventoryActions = () => {
  const { plantSeed } = useFarmContracts();
  const { removeItem } = useInventoryStore();
  const { addPlantedSeed, getPlantedSeed } = usePlantStore();
  const { writeContractAsync: writeFarmCoin } = useScaffoldWriteContract("FarmCoin");

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  const lastPlantTime = useRef<number>(0);

  const seedTypeMap: Record<string, number> = {
    wheat_seed: 0,
    grape_seed: 1,
    pumpkin_seed: 2,
  };

  const handlePlantSeed = async (item: Item, quantity: number, x?: number, y?: number) => {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∫–ª–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ—Å–∞–¥–∫–∞–º–∏)
    const now = Date.now();
    if (now - lastPlantTime.current < 2000) {
      console.log("‚è≥ Too fast! Please wait before planting another seed.");
      return false;
    }
    lastPlantTime.current = now;

    try {
      const seedType = seedTypeMap[item.id] ?? 0;

      console.log("üå± Planting seed:", { seedType, quantity, x, y });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (x === undefined || y === undefined) {
        console.error("‚ùå Coordinates not specified");
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞
      const existingSeed = getPlantedSeed(x, y);
      if (existingSeed) {
        console.log("‚ö†Ô∏è Cell already occupied");
        return false;
      }

      console.log("üì§ Sending plantSeed transaction...");

      // –î–æ–∂–∏–¥–∞–µ–º—Å—è —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await plantSeed(seedType);

      console.log("‚úÖ Transaction confirmed!");

      // –£–¥–∞–ª—è–µ–º —Å–µ–º—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Å–∞–¥–∫–∏
      removeItem(item.id, quantity);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–∞–∂–µ–Ω–Ω–æ–µ —Å–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ç–∞–π–º–µ—Ä–æ–º 1 –º–∏–Ω—É—Ç–∞
      const plantedAt = Date.now();
      const growthTime = 60000; // 1 –º–∏–Ω—É—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

      addPlantedSeed({
        id: `${x}-${y}-${plantedAt}`,
        x,
        y,
        seedType: item.id,
        plantedAt,
        growthTime,
      });

      console.log(`‚úÖ Successfully planted ${item.name} at (${x}, ${y})! Ready in 1 minute.`);
      return true;
    } catch (error: any) {
      console.error("‚ùå Failed to plant seed:", error);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error?.message?.includes("nonce")) {
        console.log("‚è≠Ô∏è Nonce error - transaction may already be pending. Skipping...");
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –≤ –º–µ–º–ø—É–ª–µ
        return false;
      } else if (error?.message?.includes("rejected")) {
        console.log("‚ùå Transaction rejected by user");
        return false;
      } else if (error?.message?.includes("insufficient funds")) {
        alert("‚ùå Insufficient funds to pay for gas");
        return false;
      }

      return false;
    }
  };

  const handleSellCrop = async (item: Item, quantity: number) => {
    try {
      if (!item.sellPrice || item.sellPrice <= 0) {
        console.log("‚ùå This item cannot be sold (no sell price)");
        return false;
      }

      // –í—ã–∑—ã–≤–∞–µ–º claimTokens –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ)
      await writeFarmCoin({
        functionName: "claimTokens",
      });

      // –£–¥–∞–ª—è–µ–º –ø–ª–æ–¥ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      removeItem(item.id, quantity);

      console.log(`‚úÖ Successfully sold ${quantity} ${item.name}!`);
      console.log(`üí∞ Claimed 1000 FarmCoin tokens!`);
      return true;
    } catch (error) {
      console.error("‚ùå Failed to sell crop:", error);
      return false;
    }
  };

  return {
    handlePlantSeed,
    handleSellCrop,
  };
};
