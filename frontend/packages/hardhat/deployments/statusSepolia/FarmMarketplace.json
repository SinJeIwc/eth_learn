{
  "address": "0xb7278A61aa25c888815aFC32Ad3cC52fF24fE575",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmCoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_plantNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmLand",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameEvents",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameEffects",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "farmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "plantTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "CropHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PlantNFT.PlantType",
          "name": "cropType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalEarned",
          "type": "uint256"
        }
      ],
      "name": "CropSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "farmer",
          "type": "address"
        }
      ],
      "name": "EventTriggeredAndApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "farmer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "plantTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landTokenId",
          "type": "uint256"
        }
      ],
      "name": "PlantPlanted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum PriceOracle.SeedType",
          "name": "seedType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCost",
          "type": "uint256"
        }
      ],
      "name": "SeedPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.SeedType",
          "name": "seedType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buySeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmCoin",
      "outputs": [
        {
          "internalType": "contract FarmCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmLand",
      "outputs": [
        {
          "internalType": "contract FarmLand",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameEffects",
      "outputs": [
        {
          "internalType": "contract GameEffects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameEvents",
      "outputs": [
        {
          "internalType": "contract GameEvents",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlayerStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coinBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "landCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "landTokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "giveStarterCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "plantTokenId",
          "type": "uint256"
        }
      ],
      "name": "harvestCrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "mintStarterLand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plantNFT",
      "outputs": [
        {
          "internalType": "contract PlantNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.SeedType",
          "name": "seedType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "landTokenId",
          "type": "uint256"
        }
      ],
      "name": "plantSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "plantTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract PriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.SeedType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "seedInventory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerRandomEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf631a7f3f82cd452513fd1edc991ae75c852830a36920e0cfcbe222936641011",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xb7278A61aa25c888815aFC32Ad3cC52fF24fE575",
    "transactionIndex": 0,
    "gasUsed": "1471117",
    "logsBloom": "0x
    "blockHash": "0x8678c229b7fe7dae953299dad8ee945c60a46409ecf54b8354a3eb2bc9ce9827",
    "transactionHash": "0xf631a7f3f82cd452513fd1edc991ae75c852830a36920e0cfcbe222936641011",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11761306,
        "transactionHash": "0xf631a7f3f82cd452513fd1edc991ae75c852830a36920e0cfcbe222936641011",
        "address": "0xb7278A61aa25c888815aFC32Ad3cC52fF24fE575",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8678c229b7fe7dae953299dad8ee945c60a46409ecf54b8354a3eb2bc9ce9827"
      }
    ],
    "blockNumber": 11761306,
    "cumulativeGasUsed": "1471117",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
    "0x36C02dA8a0983159322a80FFE9F24b1acfF8B570",
    "0x809d550fca64d94Bd9F66E60752A544199cfAC3D",
    "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
    "0x1291Be112d480055DaFd8a610b7d1e203891C274",
    "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a7c913e832cbcb2622e48effc3e7d82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plantNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmLand\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameEffects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CropHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PlantNFT.PlantType\",\"name\":\"cropType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"name\":\"CropSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"EventTriggeredAndApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landTokenId\",\"type\":\"uint256\"}],\"name\":\"PlantPlanted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"seedType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"name\":\"SeedPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"seedType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buySeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmCoin\",\"outputs\":[{\"internalType\":\"contract FarmCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmLand\",\"outputs\":[{\"internalType\":\"contract FarmLand\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEffects\",\"outputs\":[{\"internalType\":\"contract GameEffects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEvents\",\"outputs\":[{\"internalType\":\"contract GameEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coinBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"landTokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveStarterCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plantTokenId\",\"type\":\"uint256\"}],\"name\":\"harvestCrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"mintStarterLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantNFT\",\"outputs\":[{\"internalType\":\"contract PlantNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"seedType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"landTokenId\",\"type\":\"uint256\"}],\"name\":\"plantSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"plantTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"seedInventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerRandomEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Orchestrates the entire chain reaction: Buy -> Plant -> Event -> Effect -> Price Change\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"triggerRandomEvent()\":{\"details\":\"Anyone can trigger events, but effects apply to their own farm\"}},\"title\":\"FarmMarketplace\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buySeed(uint8,uint256)\":{\"notice\":\"Buy seeds from shop using FarmCoin\"},\"emergencyWithdraw()\":{\"notice\":\"Emergency withdraw (owner only)\"},\"getPlayerStatus(address)\":{\"notice\":\"Get player's farm status\"},\"giveStarterCoins(address,uint256)\":{\"notice\":\"Give starter coins to new players\"},\"harvestCrop(uint256)\":{\"notice\":\"Harvest a mature plant\"},\"mintStarterLand(address)\":{\"notice\":\"Mint initial land plots to a new player\"},\"plantSeed(uint8,uint256)\":{\"notice\":\"Plant a seed on owned land\"},\"triggerRandomEvent()\":{\"notice\":\"Trigger random event and apply effects (CHAIN REACTION STARTS HERE!)\"}},\"notice\":\"Main marketplace for buying seeds, planting, harvesting, and selling crops\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FarmMarketplace.sol\":\"FarmMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/FarmCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FarmCoin\\r\\n * @notice ERC20 token for in-game currency\\r\\n */\\r\\ncontract FarmCoin is ERC20, Ownable {\\r\\n    // Authorized contracts that can mint/burn tokens\\r\\n    mapping(address => bool) public authorizedMinters;\\r\\n    \\r\\n    event MinterAuthorized(address indexed minter, bool authorized);\\r\\n    \\r\\n    constructor(address initialOwner) \\r\\n        ERC20(\\\"Farm Coin\\\", \\\"FARM\\\") \\r\\n        Ownable(initialOwner)\\r\\n    {\\r\\n        // Mint initial supply to owner\\r\\n        _mint(initialOwner, 1000000 * 10**decimals());\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Authorize a contract to mint/burn tokens\\r\\n     */\\r\\n    function setAuthorizedMinter(address minter, bool authorized) external onlyOwner {\\r\\n        authorizedMinters[minter] = authorized;\\r\\n        emit MinterAuthorized(minter, authorized);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint tokens (only authorized minters)\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        require(authorizedMinters[msg.sender], \\\"Not authorized to mint\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Burn tokens from sender\\r\\n     */\\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Burn tokens from account (only authorized minters)\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) external {\\r\\n        require(authorizedMinters[msg.sender], \\\"Not authorized to burn\\\");\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71b6081f85665c36bc9637a2b978833ea031c39dfffd8e4be0b42ead588cfbbd\",\"license\":\"MIT\"},\"contracts/FarmLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FarmLand\\r\\n * @notice ERC721 NFT representing land plots (8x6 grid = 48 plots)\\r\\n */\\r\\ncontract FarmLand is ERC721, Ownable {\\r\\n    uint256 public constant MAX_PLOTS = 48; // 8x6 grid\\r\\n    uint256 private _nextTokenId;\\r\\n    \\r\\n    struct LandPlot {\\r\\n        uint8 x;           // 0-7\\r\\n        uint8 y;           // 0-5\\r\\n        uint16 fertility;  // 0-1000\\r\\n        uint256 ownedSince;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => LandPlot) public landPlots;\\r\\n    mapping(address => bool) public authorizedManagers;\\r\\n    \\r\\n    event LandMinted(uint256 indexed tokenId, address indexed owner, uint8 x, uint8 y);\\r\\n    event FertilityChanged(uint256 indexed tokenId, uint16 newFertility);\\r\\n    event ManagerAuthorized(address indexed manager, bool authorized);\\r\\n    \\r\\n    constructor(address initialOwner) \\r\\n        ERC721(\\\"Farm Land\\\", \\\"LAND\\\") \\r\\n        Ownable(initialOwner)\\r\\n    {}\\r\\n    \\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorizedManagers[msg.sender] || msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Authorize a contract to manage land\\r\\n     */\\r\\n    function setAuthorizedManager(address manager, bool authorized) external onlyOwner {\\r\\n        authorizedManagers[manager] = authorized;\\r\\n        emit ManagerAuthorized(manager, authorized);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint a land plot NFT\\r\\n     */\\r\\n    function mint(address to, uint8 x, uint8 y) external onlyAuthorized returns (uint256) {\\r\\n        require(_nextTokenId < MAX_PLOTS, \\\"All plots minted\\\");\\r\\n        require(x < 8 && y < 6, \\\"Invalid coordinates\\\");\\r\\n        \\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        \\r\\n        landPlots[tokenId] = LandPlot({\\r\\n            x: x,\\r\\n            y: y,\\r\\n            fertility: 1000,\\r\\n            ownedSince: block.timestamp\\r\\n        });\\r\\n        \\r\\n        emit LandMinted(tokenId, to, x, y);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update land fertility (affected by events)\\r\\n     */\\r\\n    function updateFertility(uint256 tokenId, uint16 newFertility) external onlyAuthorized {\\r\\n        require(newFertility <= 1000, \\\"Fertility exceeds max\\\");\\r\\n        landPlots[tokenId].fertility = newFertility;\\r\\n        emit FertilityChanged(tokenId, newFertility);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get land plot info\\r\\n     */\\r\\n    function getLandPlot(uint256 tokenId) external view returns (LandPlot memory) {\\r\\n        return landPlots[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get all land plots owned by address\\r\\n     */\\r\\n    function getLandsByOwner(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 balance = balanceOf(owner);\\r\\n        uint256[] memory ownedTokenIds = new uint256[](balance);\\r\\n        \\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = 0; i < _nextTokenId; i++) {\\r\\n            if (_ownerOf(i) == owner) {\\r\\n                ownedTokenIds[currentIndex] = i;\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return ownedTokenIds;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55a968d50d9b609619cf1ba66c4cbe47629e7918414e132dccdd9ef987a37d12\",\"license\":\"MIT\"},\"contracts/FarmMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./FarmCoin.sol\\\";\\r\\nimport \\\"./PlantNFT.sol\\\";\\r\\nimport \\\"./FarmLand.sol\\\";\\r\\nimport \\\"./GameEvents.sol\\\";\\r\\nimport \\\"./GameEffects.sol\\\";\\r\\nimport \\\"./PriceOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FarmMarketplace\\r\\n * @notice Main marketplace for buying seeds, planting, harvesting, and selling crops\\r\\n * @dev Orchestrates the entire chain reaction: Buy -> Plant -> Event -> Effect -> Price Change\\r\\n */\\r\\ncontract FarmMarketplace is Ownable, ReentrancyGuard {\\r\\n    FarmCoin public farmCoin;\\r\\n    PlantNFT public plantNFT;\\r\\n    FarmLand public farmLand;\\r\\n    GameEvents public gameEvents;\\r\\n    GameEffects public gameEffects;\\r\\n    PriceOracle public priceOracle;\\r\\n    \\r\\n    // Shop inventory\\r\\n    mapping(PriceOracle.SeedType => uint256) public seedInventory;\\r\\n    \\r\\n    event SeedPurchased(address indexed buyer, PriceOracle.SeedType seedType, uint256 quantity, uint256 totalCost);\\r\\n    event PlantPlanted(address indexed farmer, uint256 plantTokenId, uint256 landTokenId);\\r\\n    event CropHarvested(address indexed farmer, uint256 plantTokenId, uint256 reward);\\r\\n    event CropSold(address indexed seller, PlantNFT.PlantType cropType, uint256 quantity, uint256 totalEarned);\\r\\n    event EventTriggeredAndApplied(uint256 indexed eventId, address indexed farmer);\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        address _farmCoin,\\r\\n        address _plantNFT,\\r\\n        address _farmLand,\\r\\n        address _gameEvents,\\r\\n        address _gameEffects,\\r\\n        address _priceOracle\\r\\n    ) Ownable(initialOwner) {\\r\\n        farmCoin = FarmCoin(_farmCoin);\\r\\n        plantNFT = PlantNFT(_plantNFT);\\r\\n        farmLand = FarmLand(_farmLand);\\r\\n        gameEvents = GameEvents(_gameEvents);\\r\\n        gameEffects = GameEffects(_gameEffects);\\r\\n        priceOracle = PriceOracle(_priceOracle);\\r\\n        \\r\\n        // Initialize shop inventory (unlimited for demo)\\r\\n        seedInventory[PriceOracle.SeedType.WHEAT_SEED] = type(uint256).max;\\r\\n        seedInventory[PriceOracle.SeedType.GRAPE_SEED] = type(uint256).max;\\r\\n        seedInventory[PriceOracle.SeedType.PUMPKIN_SEED] = type(uint256).max;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Buy seeds from shop using FarmCoin\\r\\n     */\\r\\n    function buySeed(PriceOracle.SeedType seedType, uint256 quantity) external nonReentrant {\\r\\n        require(quantity > 0, \\\"Invalid quantity\\\");\\r\\n        require(seedInventory[seedType] >= quantity, \\\"Insufficient inventory\\\");\\r\\n        \\r\\n        uint256 pricePerSeed = priceOracle.getSeedPrice(seedType);\\r\\n        uint256 totalCost = pricePerSeed * quantity;\\r\\n        \\r\\n        // Burn FarmCoin from buyer\\r\\n        farmCoin.burnFrom(msg.sender, totalCost);\\r\\n        \\r\\n        // Update inventory\\r\\n        seedInventory[seedType] -= quantity;\\r\\n        \\r\\n        emit SeedPurchased(msg.sender, seedType, quantity, totalCost);\\r\\n        \\r\\n        // TODO: Track seeds in user's inventory (off-chain or separate contract)\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Plant a seed on owned land\\r\\n     */\\r\\n    function plantSeed(\\r\\n        PriceOracle.SeedType seedType,\\r\\n        uint256 landTokenId\\r\\n    ) external nonReentrant returns (uint256 plantTokenId) {\\r\\n        require(farmLand.ownerOf(landTokenId) == msg.sender, \\\"Not land owner\\\");\\r\\n        \\r\\n        // Convert seed type to plant type\\r\\n        PlantNFT.PlantType plantType;\\r\\n        if (seedType == PriceOracle.SeedType.WHEAT_SEED) {\\r\\n            plantType = PlantNFT.PlantType.WHEAT;\\r\\n        } else if (seedType == PriceOracle.SeedType.GRAPE_SEED) {\\r\\n            plantType = PlantNFT.PlantType.GRAPE;\\r\\n        } else {\\r\\n            plantType = PlantNFT.PlantType.PUMPKIN;\\r\\n        }\\r\\n        \\r\\n        // Mint plant NFT\\r\\n        plantTokenId = plantNFT.mint(msg.sender, plantType, landTokenId);\\r\\n        \\r\\n        emit PlantPlanted(msg.sender, plantTokenId, landTokenId);\\r\\n        \\r\\n        return plantTokenId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Harvest a mature plant\\r\\n     */\\r\\n    function harvestCrop(uint256 plantTokenId) external nonReentrant {\\r\\n        require(plantNFT.ownerOf(plantTokenId) == msg.sender, \\\"Not plant owner\\\");\\r\\n        require(plantNFT.isReadyToHarvest(plantTokenId), \\\"Plant not ready\\\");\\r\\n        \\r\\n        PlantNFT.Plant memory plant = plantNFT.getPlant(plantTokenId);\\r\\n        \\r\\n        // Calculate reward based on health\\r\\n        PriceOracle.CropType cropType;\\r\\n        if (plant.plantType == PlantNFT.PlantType.WHEAT) {\\r\\n            cropType = PriceOracle.CropType.WHEAT;\\r\\n        } else if (plant.plantType == PlantNFT.PlantType.GRAPE) {\\r\\n            cropType = PriceOracle.CropType.GRAPE;\\r\\n        } else {\\r\\n            cropType = PriceOracle.CropType.PUMPKIN;\\r\\n        }\\r\\n        \\r\\n        uint256 baseReward = priceOracle.getCropPrice(cropType);\\r\\n        uint256 reward = (baseReward * plant.health) / 1000; // Scale by health\\r\\n        \\r\\n        // Mint FarmCoin reward\\r\\n        farmCoin.mint(msg.sender, reward);\\r\\n        \\r\\n        // Burn plant NFT\\r\\n        plantNFT.burn(plantTokenId);\\r\\n        \\r\\n        emit CropHarvested(msg.sender, plantTokenId, reward);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Trigger random event and apply effects (CHAIN REACTION STARTS HERE!)\\r\\n     * @dev Anyone can trigger events, but effects apply to their own farm\\r\\n     */\\r\\n    function triggerRandomEvent() external nonReentrant {\\r\\n        // 1\\ufe0f\\u20e3 STEP 1: Generate random event\\r\\n        uint256 eventId = gameEvents.triggerEvent();\\r\\n        \\r\\n        // 2\\ufe0f\\u20e3 STEP 2: Apply effects to caller's farm\\r\\n        gameEffects.applyEffects(eventId, msg.sender);\\r\\n        \\r\\n        // 3\\ufe0f\\u20e3 STEP 3: Update market prices\\r\\n        priceOracle.updatePrices(eventId);\\r\\n        \\r\\n        emit EventTriggeredAndApplied(eventId, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint initial land plots to a new player\\r\\n     */\\r\\n    function mintStarterLand(address player) external onlyOwner {\\r\\n        // Mint 8x6 grid (48 plots)\\r\\n        for (uint8 y = 0; y < 6; y++) {\\r\\n            for (uint8 x = 0; x < 8; x++) {\\r\\n                farmLand.mint(player, x, y);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Give starter coins to new players\\r\\n     */\\r\\n    function giveStarterCoins(address player, uint256 amount) external onlyOwner {\\r\\n        farmCoin.mint(player, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Emergency withdraw (owner only)\\r\\n     */\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get player's farm status\\r\\n     */\\r\\n    function getPlayerStatus(address player) external view returns (\\r\\n        uint256 coinBalance,\\r\\n        uint256 landCount,\\r\\n        uint256[] memory landTokenIds\\r\\n    ) {\\r\\n        coinBalance = farmCoin.balanceOf(player);\\r\\n        landTokenIds = farmLand.getLandsByOwner(player);\\r\\n        landCount = landTokenIds.length;\\r\\n        \\r\\n        return (coinBalance, landCount, landTokenIds);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x45c1e90d9398d2cebd71b5302dcaa4b0c145f4010f9fa718cf84db91e5df2329\",\"license\":\"MIT\"},\"contracts/GameEffects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./GameEvents.sol\\\";\\r\\nimport \\\"./PlantNFT.sol\\\";\\r\\nimport \\\"./FarmLand.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GameEffects\\r\\n * @notice Applies event effects to plants and land\\r\\n * @dev Second contract in the chain reaction (called after GameEvents)\\r\\n */\\r\\ncontract GameEffects is Ownable {\\r\\n    PlantNFT public plantNFT;\\r\\n    FarmLand public farmLand;\\r\\n    GameEvents public gameEvents;\\r\\n    \\r\\n    // Next contract in chain (PriceOracle)\\r\\n    address public priceOracle;\\r\\n    \\r\\n    struct EffectResult {\\r\\n        int16 healthChange;     // -1000 to +1000\\r\\n        int16 fertilityChange;  // -1000 to +1000\\r\\n        uint16 affectedPlants;\\r\\n        uint16 affectedLand;\\r\\n    }\\r\\n    \\r\\n    event EffectsApplied(\\r\\n        uint256 indexed eventId,\\r\\n        int16 avgHealthChange,\\r\\n        int16 avgFertilityChange,\\r\\n        uint16 affectedPlants,\\r\\n        uint16 affectedLand\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        address _plantNFT,\\r\\n        address _farmLand,\\r\\n        address _gameEvents\\r\\n    ) Ownable(initialOwner) {\\r\\n        plantNFT = PlantNFT(_plantNFT);\\r\\n        farmLand = FarmLand(_farmLand);\\r\\n        gameEvents = GameEvents(_gameEvents);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Set price oracle contract\\r\\n     */\\r\\n    function setPriceOracle(address _priceOracle) external onlyOwner {\\r\\n        priceOracle = _priceOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply effects to a player's farm based on event\\r\\n     * @dev Called automatically after event is triggered\\r\\n     */\\r\\n    function applyEffects(\\r\\n        uint256 eventId,\\r\\n        address farmer\\r\\n    ) external returns (EffectResult memory) {\\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        \\r\\n        // Get farmer's land plots\\r\\n        uint256[] memory landTokenIds = farmLand.getLandsByOwner(farmer);\\r\\n        \\r\\n        EffectResult memory result = EffectResult({\\r\\n            healthChange: 0,\\r\\n            fertilityChange: 0,\\r\\n            affectedPlants: 0,\\r\\n            affectedLand: 0\\r\\n        });\\r\\n        \\r\\n        // Apply effects based on event type\\r\\n        (int16 healthMod, int16 fertilityMod) = _calculateModifiers(\\r\\n            gameEvent.eventType,\\r\\n            gameEvent.severity\\r\\n        );\\r\\n        \\r\\n        // Apply to all farmer's land plots\\r\\n        for (uint256 i = 0; i < landTokenIds.length; i++) {\\r\\n            uint256 landId = landTokenIds[i];\\r\\n            FarmLand.LandPlot memory plot = farmLand.getLandPlot(landId);\\r\\n            \\r\\n            // Update land fertility\\r\\n            uint16 newFertility = _applyChange(plot.fertility, fertilityMod);\\r\\n            farmLand.updateFertility(landId, newFertility);\\r\\n            result.affectedLand++;\\r\\n            result.fertilityChange += fertilityMod;\\r\\n        }\\r\\n        \\r\\n        // TODO: Apply to plants on these land plots\\r\\n        // For now, simplified version without tracking plant-land mapping\\r\\n        \\r\\n        emit EffectsApplied(\\r\\n            eventId,\\r\\n            healthMod,\\r\\n            fertilityMod,\\r\\n            result.affectedPlants,\\r\\n            result.affectedLand\\r\\n        );\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply effect to a specific plant\\r\\n     */\\r\\n    function applyEffectToPlant(uint256 plantTokenId, uint256 eventId) external {\\r\\n        require(plantNFT.ownerOf(plantTokenId) == msg.sender, \\\"Not plant owner\\\");\\r\\n        \\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        PlantNFT.Plant memory plant = plantNFT.getPlant(plantTokenId);\\r\\n        \\r\\n        (int16 healthMod, ) = _calculateModifiers(\\r\\n            gameEvent.eventType,\\r\\n            gameEvent.severity\\r\\n        );\\r\\n        \\r\\n        // Apply health change\\r\\n        uint16 newHealth = _applyChange(plant.health, healthMod);\\r\\n        plantNFT.updateHealth(plantTokenId, newHealth);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Calculate modifiers based on event type and severity\\r\\n     */\\r\\n    function _calculateModifiers(\\r\\n        GameEvents.EventType eventType,\\r\\n        uint16 severity\\r\\n    ) internal pure returns (int16 healthMod, int16 fertilityMod) {\\r\\n        if (eventType == GameEvents.EventType.NONE) {\\r\\n            return (0, 0);\\r\\n        } else if (eventType == GameEvents.EventType.RAIN) {\\r\\n            // Positive effect\\r\\n            healthMod = int16(uint16(severity / 5));  // +0 to +200\\r\\n            fertilityMod = int16(uint16(severity / 10)); // +0 to +100\\r\\n        } else if (eventType == GameEvents.EventType.SUNSTORM) {\\r\\n            // Very positive\\r\\n            healthMod = int16(uint16(severity / 3));  // +0 to +333\\r\\n            fertilityMod = int16(uint16(severity / 5)); // +0 to +200\\r\\n        } else if (eventType == GameEvents.EventType.LOCUSTS) {\\r\\n            // Heavy damage\\r\\n            healthMod = -int16(uint16(severity / 2));  // -0 to -500\\r\\n            fertilityMod = -int16(uint16(severity / 4)); // -0 to -250\\r\\n        } else if (eventType == GameEvents.EventType.FROST) {\\r\\n            // Very heavy damage\\r\\n            healthMod = -int16(uint16((severity * 7) / 10));  // -0 to -700\\r\\n            fertilityMod = -int16(uint16(severity / 3)); // -0 to -333\\r\\n        } else if (eventType == GameEvents.EventType.DROUGHT) {\\r\\n            // Moderate damage\\r\\n            healthMod = -int16(uint16(severity / 3));  // -0 to -333\\r\\n            fertilityMod = -int16(uint16(severity / 5)); // -0 to -200\\r\\n        } else if (eventType == GameEvents.EventType.WIND) {\\r\\n            // Minor damage\\r\\n            healthMod = -int16(uint16(severity / 5));  // -0 to -200\\r\\n            fertilityMod = -int16(uint16(severity / 10)); // -0 to -100\\r\\n        } else if (eventType == GameEvents.EventType.PESTS) {\\r\\n            // Moderate damage\\r\\n            healthMod = -int16(uint16(severity / 4));  // -0 to -250\\r\\n            fertilityMod = -int16(uint16(severity / 6)); // -0 to -166\\r\\n        }\\r\\n        \\r\\n        return (healthMod, fertilityMod);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply change to a value (0-1000 range)\\r\\n     */\\r\\n    function _applyChange(uint16 current, int16 change) internal pure returns (uint16) {\\r\\n        int32 result = int32(int16(current)) + int32(change);\\r\\n        if (result < 0) return 0;\\r\\n        if (result > 1000) return 1000;\\r\\n        return uint16(uint32(result));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcc321ffd26148a519b2cd81ce66a77165e725e56640a3c1b1a2f8b6e3d0b0131\",\"license\":\"MIT\"},\"contracts/GameEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GameEvents\\r\\n * @notice Generates random farm events (locusts, wind, rain, etc.)\\r\\n * @dev First contract in the chain reaction\\r\\n */\\r\\ncontract GameEvents is Ownable {\\r\\n    enum EventType {\\r\\n        NONE,       // 30% - Nothing happens\\r\\n        LOCUSTS,    // 15% - Damage crops\\r\\n        WIND,       // 10% - Minor damage\\r\\n        RAIN,       // 20% - Good for growth\\r\\n        DROUGHT,    // 10% - Reduces health\\r\\n        FROST,      // 5%  - Heavy damage\\r\\n        SUNSTORM,   // 5%  - Boosts growth\\r\\n        PESTS       // 5%  - Moderate damage\\r\\n    }\\r\\n    \\r\\n    struct GameEvent {\\r\\n        EventType eventType;\\r\\n        uint16 severity;      // 0-1000\\r\\n        uint256 timestamp;\\r\\n        uint256 blockNumber;\\r\\n    }\\r\\n    \\r\\n    // Store event history\\r\\n    GameEvent[] public eventHistory;\\r\\n    \\r\\n    // Next contract in chain (FarmEffects)\\r\\n    address public effectsContract;\\r\\n    \\r\\n    event EventTriggered(\\r\\n        uint256 indexed eventId,\\r\\n        EventType eventType,\\r\\n        uint16 severity,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\r\\n    \\r\\n    /**\\r\\n     * @notice Set the effects contract address\\r\\n     */\\r\\n    function setEffectsContract(address _effectsContract) external onlyOwner {\\r\\n        effectsContract = _effectsContract;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Generate a random event (called by keeper or player action)\\r\\n     */\\r\\n    function triggerEvent() external returns (uint256 eventId) {\\r\\n        // Generate pseudo-random number\\r\\n        uint256 random = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    block.timestamp,\\r\\n                    block.prevrandao,\\r\\n                    msg.sender,\\r\\n                    eventHistory.length\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        \\r\\n        // Select event type based on probability\\r\\n        EventType eventType = _selectEventType(random % 100);\\r\\n        \\r\\n        // Calculate severity (0-1000)\\r\\n        uint16 severity = uint16((random >> 8) % 1001);\\r\\n        \\r\\n        // Store event\\r\\n        GameEvent memory newEvent = GameEvent({\\r\\n            eventType: eventType,\\r\\n            severity: severity,\\r\\n            timestamp: block.timestamp,\\r\\n            blockNumber: block.number\\r\\n        });\\r\\n        \\r\\n        eventHistory.push(newEvent);\\r\\n        eventId = eventHistory.length - 1;\\r\\n        \\r\\n        emit EventTriggered(eventId, eventType, severity, block.timestamp);\\r\\n        \\r\\n        return eventId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Select event type based on weighted probability\\r\\n     */\\r\\n    function _selectEventType(uint256 rand) internal pure returns (EventType) {\\r\\n        if (rand < 30) return EventType.NONE;        // 30%\\r\\n        if (rand < 50) return EventType.RAIN;        // 20%\\r\\n        if (rand < 65) return EventType.LOCUSTS;     // 15%\\r\\n        if (rand < 75) return EventType.WIND;        // 10%\\r\\n        if (rand < 85) return EventType.DROUGHT;     // 10%\\r\\n        if (rand < 90) return EventType.SUNSTORM;    // 5%\\r\\n        if (rand < 95) return EventType.FROST;       // 5%\\r\\n        return EventType.PESTS;                      // 5%\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get event by ID\\r\\n     */\\r\\n    function getEvent(uint256 eventId) external view returns (GameEvent memory) {\\r\\n        require(eventId < eventHistory.length, \\\"Event does not exist\\\");\\r\\n        return eventHistory[eventId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get total events count\\r\\n     */\\r\\n    function getEventsCount() external view returns (uint256) {\\r\\n        return eventHistory.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get recent events\\r\\n     */\\r\\n    function getRecentEvents(uint256 count) external view returns (GameEvent[] memory) {\\r\\n        uint256 total = eventHistory.length;\\r\\n        if (count > total) count = total;\\r\\n        \\r\\n        GameEvent[] memory recent = new GameEvent[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            recent[i] = eventHistory[total - count + i];\\r\\n        }\\r\\n        \\r\\n        return recent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6248c77448eb8c8bcc42f022ba425eea3db47ea4da0269e89247dafc3c61d126\",\"license\":\"MIT\"},\"contracts/PlantNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PlantNFT\\r\\n * @notice ERC721 NFT representing planted crops\\r\\n * @dev Each plant has type, growth stage, health, and planted timestamp\\r\\n */\\r\\ncontract PlantNFT is ERC721, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    \\r\\n    enum PlantType { WHEAT, GRAPE, PUMPKIN }\\r\\n    \\r\\n    struct Plant {\\r\\n        PlantType plantType;\\r\\n        uint8 growthStage;      // 0-3 (seed -> mature)\\r\\n        uint16 health;          // 0-1000\\r\\n        uint256 plantedAt;      // timestamp\\r\\n        uint256 landTokenId;    // which land plot it's on\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => Plant) public plants;\\r\\n    mapping(address => bool) public authorizedManagers;\\r\\n    \\r\\n    event PlantCreated(uint256 indexed tokenId, address indexed owner, PlantType plantType, uint256 landTokenId);\\r\\n    event PlantGrown(uint256 indexed tokenId, uint8 newStage);\\r\\n    event PlantHealthChanged(uint256 indexed tokenId, uint16 newHealth);\\r\\n    event ManagerAuthorized(address indexed manager, bool authorized);\\r\\n    \\r\\n    constructor(address initialOwner) \\r\\n        ERC721(\\\"Farm Plant\\\", \\\"PLANT\\\") \\r\\n        Ownable(initialOwner)\\r\\n    {}\\r\\n    \\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorizedManagers[msg.sender] || msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Authorize a contract to manage plants\\r\\n     */\\r\\n    function setAuthorizedManager(address manager, bool authorized) external onlyOwner {\\r\\n        authorizedManagers[manager] = authorized;\\r\\n        emit ManagerAuthorized(manager, authorized);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint a new plant NFT\\r\\n     */\\r\\n    function mint(\\r\\n        address to,\\r\\n        PlantType plantType,\\r\\n        uint256 landTokenId\\r\\n    ) external onlyAuthorized returns (uint256) {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        \\r\\n        plants[tokenId] = Plant({\\r\\n            plantType: plantType,\\r\\n            growthStage: 0,\\r\\n            health: 1000,\\r\\n            plantedAt: block.timestamp,\\r\\n            landTokenId: landTokenId\\r\\n        });\\r\\n        \\r\\n        emit PlantCreated(tokenId, to, plantType, landTokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update plant growth stage\\r\\n     */\\r\\n    function updateGrowthStage(uint256 tokenId, uint8 newStage) external onlyAuthorized {\\r\\n        require(newStage <= 3, \\\"Invalid growth stage\\\");\\r\\n        plants[tokenId].growthStage = newStage;\\r\\n        emit PlantGrown(tokenId, newStage);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update plant health (called by FarmEffects contract)\\r\\n     */\\r\\n    function updateHealth(uint256 tokenId, uint16 newHealth) external onlyAuthorized {\\r\\n        require(newHealth <= 1000, \\\"Health exceeds max\\\");\\r\\n        plants[tokenId].health = newHealth;\\r\\n        emit PlantHealthChanged(tokenId, newHealth);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Burn plant NFT (when harvested)\\r\\n     */\\r\\n    function burn(uint256 tokenId) external onlyAuthorized {\\r\\n        _burn(tokenId);\\r\\n        delete plants[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get plant info\\r\\n     */\\r\\n    function getPlant(uint256 tokenId) external view returns (Plant memory) {\\r\\n        return plants[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Check if plant is ready to harvest\\r\\n     */\\r\\n    function isReadyToHarvest(uint256 tokenId) external view returns (bool) {\\r\\n        Plant memory plant = plants[tokenId];\\r\\n        \\r\\n        // Growth time in seconds\\r\\n        uint256 requiredTime;\\r\\n        if (plant.plantType == PlantType.WHEAT) {\\r\\n            requiredTime = 15; // 15 seconds for demo\\r\\n        } else if (plant.plantType == PlantType.GRAPE) {\\r\\n            requiredTime = 25;\\r\\n        } else {\\r\\n            requiredTime = 35;\\r\\n        }\\r\\n        \\r\\n        return (block.timestamp >= plant.plantedAt + requiredTime) && \\r\\n               (plant.growthStage >= 3) &&\\r\\n               (plant.health > 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35779688e4c48210f3094815003017357305f9f59898b704baa8b8d6c06c8b66\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./GameEvents.sol\\\";\\r\\nimport \\\"./GameEffects.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PriceOracle\\r\\n * @notice Dynamic pricing based on events and effects\\r\\n * @dev Third contract in the chain reaction\\r\\n */\\r\\ncontract PriceOracle is Ownable {\\r\\n    GameEvents public gameEvents;\\r\\n    GameEffects public gameEffects;\\r\\n    \\r\\n    enum CropType { WHEAT, GRAPE, PUMPKIN }\\r\\n    enum SeedType { WHEAT_SEED, GRAPE_SEED, PUMPKIN_SEED }\\r\\n    \\r\\n    // Base prices in wei (for demo, small values)\\r\\n    uint256 public constant BASE_WHEAT_SEED = 0.005 ether;\\r\\n    uint256 public constant BASE_GRAPE_SEED = 0.012 ether;\\r\\n    uint256 public constant BASE_PUMPKIN_SEED = 0.020 ether;\\r\\n    \\r\\n    uint256 public constant BASE_WHEAT_CROP = 0.010 ether;\\r\\n    uint256 public constant BASE_GRAPE_CROP = 0.025 ether;\\r\\n    uint256 public constant BASE_PUMPKIN_CROP = 0.045 ether;\\r\\n    \\r\\n    // Current price multipliers (1000 = 1.0x, 1500 = 1.5x)\\r\\n    mapping(CropType => uint256) public cropMultipliers;\\r\\n    mapping(SeedType => uint256) public seedMultipliers;\\r\\n    \\r\\n    // Price history\\r\\n    struct PriceSnapshot {\\r\\n        uint256 timestamp;\\r\\n        uint256 wheatPrice;\\r\\n        uint256 grapePrice;\\r\\n        uint256 pumpkinPrice;\\r\\n    }\\r\\n    \\r\\n    PriceSnapshot[] public priceHistory;\\r\\n    \\r\\n    event PricesUpdated(\\r\\n        uint256 indexed eventId,\\r\\n        uint256 wheatMultiplier,\\r\\n        uint256 grapeMultiplier,\\r\\n        uint256 pumpkinMultiplier\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        address _gameEvents,\\r\\n        address _gameEffects\\r\\n    ) Ownable(initialOwner) {\\r\\n        gameEvents = GameEvents(_gameEvents);\\r\\n        gameEffects = GameEffects(_gameEffects);\\r\\n        \\r\\n        // Initialize at 1.0x\\r\\n        cropMultipliers[CropType.WHEAT] = 1000;\\r\\n        cropMultipliers[CropType.GRAPE] = 1000;\\r\\n        cropMultipliers[CropType.PUMPKIN] = 1000;\\r\\n        \\r\\n        seedMultipliers[SeedType.WHEAT_SEED] = 1000;\\r\\n        seedMultipliers[SeedType.GRAPE_SEED] = 1000;\\r\\n        seedMultipliers[SeedType.PUMPKIN_SEED] = 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update prices based on recent event\\r\\n     * @dev Called after effects are applied\\r\\n     */\\r\\n    function updatePrices(uint256 eventId) external {\\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        \\r\\n        // Calculate price changes based on event type\\r\\n        (int16 wheatChange, int16 grapeChange, int16 pumpkinChange) = \\r\\n            _calculatePriceChanges(gameEvent.eventType, gameEvent.severity);\\r\\n        \\r\\n        // Apply changes to multipliers\\r\\n        cropMultipliers[CropType.WHEAT] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.WHEAT],\\r\\n            wheatChange\\r\\n        );\\r\\n        cropMultipliers[CropType.GRAPE] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.GRAPE],\\r\\n            grapeChange\\r\\n        );\\r\\n        cropMultipliers[CropType.PUMPKIN] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.PUMPKIN],\\r\\n            pumpkinChange\\r\\n        );\\r\\n        \\r\\n        // Seeds follow crop prices (inverse relationship)\\r\\n        seedMultipliers[SeedType.WHEAT_SEED] = cropMultipliers[CropType.WHEAT];\\r\\n        seedMultipliers[SeedType.GRAPE_SEED] = cropMultipliers[CropType.GRAPE];\\r\\n        seedMultipliers[SeedType.PUMPKIN_SEED] = cropMultipliers[CropType.PUMPKIN];\\r\\n        \\r\\n        // Store price snapshot\\r\\n        priceHistory.push(PriceSnapshot({\\r\\n            timestamp: block.timestamp,\\r\\n            wheatPrice: getCropPrice(CropType.WHEAT),\\r\\n            grapePrice: getCropPrice(CropType.GRAPE),\\r\\n            pumpkinPrice: getCropPrice(CropType.PUMPKIN)\\r\\n        }));\\r\\n        \\r\\n        emit PricesUpdated(\\r\\n            eventId,\\r\\n            cropMultipliers[CropType.WHEAT],\\r\\n            cropMultipliers[CropType.GRAPE],\\r\\n            cropMultipliers[CropType.PUMPKIN]\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Calculate price changes based on event\\r\\n     * @dev Bad events increase prices (scarcity), good events decrease prices (abundance)\\r\\n     */\\r\\n    function _calculatePriceChanges(\\r\\n        GameEvents.EventType eventType,\\r\\n        uint16 severity\\r\\n    ) internal pure returns (int16 wheat, int16 grape, int16 pumpkin) {\\r\\n        if (eventType == GameEvents.EventType.NONE) {\\r\\n            // Prices slowly normalize\\r\\n            return (-5, -5, -5);\\r\\n        } else if (eventType == GameEvents.EventType.RAIN) {\\r\\n            // Good harvest -> lower prices\\r\\n            wheat = -int16(uint16(severity / 20));  // -0 to -50\\r\\n            grape = -int16(uint16(severity / 25));\\r\\n            pumpkin = -int16(uint16(severity / 30));\\r\\n        } else if (eventType == GameEvents.EventType.SUNSTORM) {\\r\\n            // Excellent harvest -> much lower prices\\r\\n            wheat = -int16(uint16(severity / 10));  // -0 to -100\\r\\n            grape = -int16(uint16(severity / 15));\\r\\n            pumpkin = -int16(uint16(severity / 20));\\r\\n        } else if (eventType == GameEvents.EventType.LOCUSTS) {\\r\\n            // Crop damage -> higher prices\\r\\n            wheat = int16(uint16(severity / 5));    // +0 to +200\\r\\n            grape = int16(uint16(severity / 7));\\r\\n            pumpkin = int16(uint16(severity / 10));\\r\\n        } else if (eventType == GameEvents.EventType.FROST) {\\r\\n            // Heavy damage -> much higher prices\\r\\n            wheat = int16(uint16(severity / 3));    // +0 to +333\\r\\n            grape = int16(uint16(severity / 4));\\r\\n            pumpkin = int16(uint16(severity / 5));\\r\\n        } else if (eventType == GameEvents.EventType.DROUGHT) {\\r\\n            // Moderate damage -> moderate price increase\\r\\n            wheat = int16(uint16(severity / 6));    // +0 to +166\\r\\n            grape = int16(uint16(severity / 8));\\r\\n            pumpkin = int16(uint16(severity / 10));\\r\\n        } else if (eventType == GameEvents.EventType.WIND || eventType == GameEvents.EventType.PESTS) {\\r\\n            // Minor damage -> slight price increase\\r\\n            wheat = int16(uint16(severity / 15));   // +0 to +66\\r\\n            grape = int16(uint16(severity / 20));\\r\\n            pumpkin = int16(uint16(severity / 25));\\r\\n        }\\r\\n        \\r\\n        return (wheat, grape, pumpkin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply multiplier change (clamped between 0.5x and 2.0x)\\r\\n     */\\r\\n    function _applyMultiplierChange(uint256 current, int16 change) internal pure returns (uint256) {\\r\\n        int32 result = int32(int256(current)) + int32(change);\\r\\n        if (result < 500) return 500;    // Min 0.5x\\r\\n        if (result > 2000) return 2000;  // Max 2.0x\\r\\n        return uint256(uint32(result));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get current seed price\\r\\n     */\\r\\n    function getSeedPrice(SeedType seedType) public view returns (uint256) {\\r\\n        uint256 basePrice;\\r\\n        if (seedType == SeedType.WHEAT_SEED) basePrice = BASE_WHEAT_SEED;\\r\\n        else if (seedType == SeedType.GRAPE_SEED) basePrice = BASE_GRAPE_SEED;\\r\\n        else basePrice = BASE_PUMPKIN_SEED;\\r\\n        \\r\\n        return (basePrice * seedMultipliers[seedType]) / 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get current crop sell price\\r\\n     */\\r\\n    function getCropPrice(CropType cropType) public view returns (uint256) {\\r\\n        uint256 basePrice;\\r\\n        if (cropType == CropType.WHEAT) basePrice = BASE_WHEAT_CROP;\\r\\n        else if (cropType == CropType.GRAPE) basePrice = BASE_GRAPE_CROP;\\r\\n        else basePrice = BASE_PUMPKIN_CROP;\\r\\n        \\r\\n        return (basePrice * cropMultipliers[cropType]) / 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get all current prices\\r\\n     */\\r\\n    function getAllPrices() external view returns (\\r\\n        uint256 wheatSeed,\\r\\n        uint256 grapeSeed,\\r\\n        uint256 pumpkinSeed,\\r\\n        uint256 wheatCrop,\\r\\n        uint256 grapeCrop,\\r\\n        uint256 pumpkinCrop\\r\\n    ) {\\r\\n        return (\\r\\n            getSeedPrice(SeedType.WHEAT_SEED),\\r\\n            getSeedPrice(SeedType.GRAPE_SEED),\\r\\n            getSeedPrice(SeedType.PUMPKIN_SEED),\\r\\n            getCropPrice(CropType.WHEAT),\\r\\n            getCropPrice(CropType.GRAPE),\\r\\n            getCropPrice(CropType.PUMPKIN)\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get price history\\r\\n     */\\r\\n    function getPriceHistory(uint256 count) external view returns (PriceSnapshot[] memory) {\\r\\n        uint256 total = priceHistory.length;\\r\\n        if (count > total) count = total;\\r\\n        \\r\\n        PriceSnapshot[] memory recent = new PriceSnapshot[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            recent[i] = priceHistory[total - count + i];\\r\\n        }\\r\\n        \\r\\n        return recent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x79e202979c8f76d348c8c80ba9fe6deb67086985df28243f57b1d49004134863\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001770380380620017708339810160408190526200003491620001cc565b866001600160a01b0381166200006457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006f816200015f565b5060018055600280546001600160a01b03199081166001600160a01b0398891617825560038054821697891697909717909655600480548716958816959095179094556005805486169387169390931790925560068054851691861691909117905560078054909316931692909217905560086020526000197f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c78190557fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f8190556000919091527f6add646517a5b0f6793cd5891b7937d28a5b2981a5d88ebc7cd776088fea9041555062000261565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001c757600080fd5b919050565b600080600080600080600060e0888a031215620001e857600080fd5b620001f388620001af565b96506200020360208901620001af565b95506200021360408901620001af565b94506200022360608901620001af565b93506200023360808901620001af565b92506200024360a08901620001af565b91506200025360c08901620001af565b905092959891949750929550565b6114ff80620002716000396000f3fe60806040526004361061010d5760003560e01c80639e95239511610095578063d8fa005711610064578063d8fa0057146102ee578063db2e21bc1461030e578063dccff22314610323578063ef7786fe14610343578063f2fde38b1461036357600080fd5b80639e95239514610279578063abf084a314610299578063ae7ea1c8146102b9578063bbef6cbe146102ce57600080fd5b80635d0cc38f116100dc5780635d0cc38f146101cb5780636aea7ca1146101eb5780636f8c0a2a14610226578063715018a6146102465780638da5cb5b1461025b57600080fd5b80630f45db91146101195780631cf0069f146101515780632630c12f146101895780635a670d50146101a957600080fd5b3661011457005b600080fd5b34801561012557600080fd5b50610139610134366004611055565b610383565b60405161014893929190611079565b60405180910390f35b34801561015d57600080fd5b50600254610171906001600160a01b031681565b6040516001600160a01b039091168152602001610148565b34801561019557600080fd5b50600754610171906001600160a01b031681565b3480156101b557600080fd5b506101c96101c43660046110dd565b61047c565b005b3480156101d757600080fd5b506101c96101e6366004611109565b6106c6565b3480156101f757600080fd5b50610218610206366004611122565b60086020526000908152604090205481565b604051908152602001610148565b34801561023257600080fd5b50600654610171906001600160a01b031681565b34801561025257600080fd5b506101c9610a8c565b34801561026757600080fd5b506000546001600160a01b0316610171565b34801561028557600080fd5b506101c961029436600461113f565b610aa0565b3480156102a557600080fd5b50600354610171906001600160a01b031681565b3480156102c557600080fd5b506101c9610b12565b3480156102da57600080fd5b506102186102e93660046110dd565b610c95565b3480156102fa57600080fd5b50600454610171906001600160a01b031681565b34801561031a57600080fd5b506101c9610e61565b34801561032f57600080fd5b506101c961033e366004611055565b610ea3565b34801561034f57600080fd5b50600554610171906001600160a01b031681565b34801561036f57600080fd5b506101c961037e366004611055565b610f5e565b6002546040516370a0823160e01b81526001600160a01b0383811660048301526000928392606092909116906370a0823190602401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f9919061115d565b6004805460405163455b9d2360e01b81526001600160a01b0388811693820193909352929550169063455b9d2390602401600060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046f91908101906111bd565b9050805191509193909250565b610484610f99565b600081116104cc5760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b60448201526064015b60405180910390fd5b80600860008460028111156104e3576104e3611263565b60028111156104f4576104f4611263565b815260200190815260200160002054101561054a5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420696e76656e746f727960501b60448201526064016104c3565b600754604051636604c5fb60e11b81526000916001600160a01b03169063cc098bf69061057b908690600401611297565b602060405180830381865afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc919061115d565b905060006105ca83836112c0565b60025460405163079cc67960e41b8152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b50505050826008600086600281111561064657610646611263565b600281111561065757610657611263565b8152602001908152602001600020600082825461067491906112d7565b909155505060405133907f0e32514dbaf7f1886ac4330923873113293d0abf52459dffaa2189c2282083b5906106af908790879086906112ea565b60405180910390a250506106c260018055565b5050565b6106ce610f99565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b919061130b565b6001600160a01b0316146107835760405162461bcd60e51b815260206004820152600f60248201526e2737ba10383630b73a1037bbb732b960891b60448201526064016104c3565b60035460405163d902c92760e01b8152600481018390526001600160a01b039091169063d902c92790602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611328565b61082e5760405162461bcd60e51b815260206004820152600f60248201526e506c616e74206e6f7420726561647960881b60448201526064016104c3565b60035460405163ed0b1f5f60e01b8152600481018390526000916001600160a01b03169063ed0b1f5f9060240160a060405180830381865afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611361565b9050600080825160028111156108b4576108b4611263565b036108c1575060006108e7565b6001825160028111156108d6576108d6611263565b036108e3575060016108e7565b5060025b60075460405163eea138e160e01b81526000916001600160a01b03169063eea138e190610918908590600401611297565b602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610959919061115d565b905060006103e8846040015161ffff168361097491906112c0565b61097e91906113ee565b6002546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156109cb57600080fd5b505af11580156109df573d6000803e3d6000fd5b5050600354604051630852cd8d60e31b8152600481018990526001600160a01b0390911692506342966c689150602401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505060408051888152602081018590523393507f1d2744d484bfd6c11eb698d6664c8bf1eb4260fbe4b9f99912e87eff5dd2ff8292500160405180910390a250505050610a8960018055565b50565b610a94610fc3565b610a9e6000610ff0565b565b610aa8610fc3565b6002546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050505050565b610b1a610f99565b6005546040805163ede48fb760e01b815290516000926001600160a01b03169163ede48fb7916004808301926020929190829003018187875af1158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b89919061115d565b60065460405163199c00f760e21b8152600481018390523360248201529192506001600160a01b03169063667003dc906044016080604051808303816000875af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190611422565b5060075460405163ae7e8d8160e01b8152600481018390526001600160a01b039091169063ae7e8d8190602401600060405180830381600087803b158015610c4657600080fd5b505af1158015610c5a573d6000803e3d6000fd5b50506040513392508391507fdd8b8ce95c50047bcd62f9d282a770d6b42aa1866ac0ea2bbfe7275ce2fc1e5d90600090a350610a9e60018055565b6000610c9f610f99565b600480546040516331a9108f60e11b815291820184905233916001600160a01b0390911690636352211e90602401602060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e919061130b565b6001600160a01b031614610d555760405162461bcd60e51b815260206004820152600e60248201526d2737ba103630b7321037bbb732b960911b60448201526064016104c3565b600080846002811115610d6a57610d6a611263565b03610d7757506000610d9c565b6001846002811115610d8b57610d8b611263565b03610d9857506001610d9c565b5060025b600354604051632769c3d960e11b81526001600160a01b0390911690634ed387b290610dd09033908590889060040161149f565b6020604051808303816000875af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061115d565b604080518281526020810186905291935033917f443deb677b158d42d9989f309feeb2c861adadb2ea82bd1592611542218579ef910160405180910390a250610e5b60018055565b92915050565b610e69610fc3565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610a89573d6000803e3d6000fd5b610eab610fc3565b60005b60068160ff1610156106c25760005b60088160ff161015610f5557600480546040516306a524d560e31b81526001600160a01b038681169382019390935260ff80851660248301528516604482015291169063352926a8906064016020604051808303816000875af1158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c919061115d565b50600101610ebd565b50600101610eae565b610f66610fc3565b6001600160a01b038116610f9057604051631e4fbdf760e01b8152600060048201526024016104c3565b610a8981610ff0565b600260015403610fbc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000546001600160a01b03163314610a9e5760405163118cdaa760e01b81523360048201526024016104c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610a8957600080fd5b60006020828403121561106757600080fd5b813561107281611040565b9392505050565b60006060820185835260208560208501526060604085015281855180845260808601915060208701935060005b818110156110c2578451835293830193918301916001016110a6565b509098975050505050505050565b60038110610a8957600080fd5b600080604083850312156110f057600080fd5b82356110fb816110d0565b946020939093013593505050565b60006020828403121561111b57600080fd5b5035919050565b60006020828403121561113457600080fd5b8135611072816110d0565b6000806040838503121561115257600080fd5b82356110fb81611040565b60006020828403121561116f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111b5576111b5611176565b604052919050565b600060208083850312156111d057600080fd5b825167ffffffffffffffff808211156111e857600080fd5b818501915085601f8301126111fc57600080fd5b81518181111561120e5761120e611176565b8060051b915061121f84830161118c565b818152918301840191848101908884111561123957600080fd5b938501935b838510156112575784518252938501939085019061123e565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b60038110610a8957634e487b7160e01b600052602160045260246000fd5b602081016112a483611279565b91905290565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e5b57610e5b6112aa565b81810381811115610e5b57610e5b6112aa565b606081016112f785611279565b938152602081019290925260409091015290565b60006020828403121561131d57600080fd5b815161107281611040565b60006020828403121561133a57600080fd5b8151801515811461107257600080fd5b805161ffff8116811461135c57600080fd5b919050565b600060a0828403121561137357600080fd5b60405160a0810181811067ffffffffffffffff8211171561139657611396611176565b60405282516113a4816110d0565b8152602083015160ff811681146113ba57600080fd5b60208201526113cb6040840161134a565b604082015260608301516060820152608083015160808201528091505092915050565b60008261140b57634e487b7160e01b600052601260045260246000fd5b500490565b8051600181900b811461135c57600080fd5b60006080828403121561143457600080fd5b6040516080810181811067ffffffffffffffff8211171561145757611457611176565b60405261146383611410565b815261147160208401611410565b60208201526114826040840161134a565b60408201526114936060840161134a565b60608201529392505050565b6001600160a01b0384168152606081016114b884611279565b60208201939093526040015291905056fea26469706673582212207d3e41f1a6b4495b794e7808a67e2f3a6cb5448282dbb9f882d7aebaccaaa4b164736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c80639e95239511610095578063d8fa005711610064578063d8fa0057146102ee578063db2e21bc1461030e578063dccff22314610323578063ef7786fe14610343578063f2fde38b1461036357600080fd5b80639e95239514610279578063abf084a314610299578063ae7ea1c8146102b9578063bbef6cbe146102ce57600080fd5b80635d0cc38f116100dc5780635d0cc38f146101cb5780636aea7ca1146101eb5780636f8c0a2a14610226578063715018a6146102465780638da5cb5b1461025b57600080fd5b80630f45db91146101195780631cf0069f146101515780632630c12f146101895780635a670d50146101a957600080fd5b3661011457005b600080fd5b34801561012557600080fd5b50610139610134366004611055565b610383565b60405161014893929190611079565b60405180910390f35b34801561015d57600080fd5b50600254610171906001600160a01b031681565b6040516001600160a01b039091168152602001610148565b34801561019557600080fd5b50600754610171906001600160a01b031681565b3480156101b557600080fd5b506101c96101c43660046110dd565b61047c565b005b3480156101d757600080fd5b506101c96101e6366004611109565b6106c6565b3480156101f757600080fd5b50610218610206366004611122565b60086020526000908152604090205481565b604051908152602001610148565b34801561023257600080fd5b50600654610171906001600160a01b031681565b34801561025257600080fd5b506101c9610a8c565b34801561026757600080fd5b506000546001600160a01b0316610171565b34801561028557600080fd5b506101c961029436600461113f565b610aa0565b3480156102a557600080fd5b50600354610171906001600160a01b031681565b3480156102c557600080fd5b506101c9610b12565b3480156102da57600080fd5b506102186102e93660046110dd565b610c95565b3480156102fa57600080fd5b50600454610171906001600160a01b031681565b34801561031a57600080fd5b506101c9610e61565b34801561032f57600080fd5b506101c961033e366004611055565b610ea3565b34801561034f57600080fd5b50600554610171906001600160a01b031681565b34801561036f57600080fd5b506101c961037e366004611055565b610f5e565b6002546040516370a0823160e01b81526001600160a01b0383811660048301526000928392606092909116906370a0823190602401602060405180830381865afa1580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f9919061115d565b6004805460405163455b9d2360e01b81526001600160a01b0388811693820193909352929550169063455b9d2390602401600060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046f91908101906111bd565b9050805191509193909250565b610484610f99565b600081116104cc5760405162461bcd60e51b815260206004820152601060248201526f496e76616c6964207175616e7469747960801b60448201526064015b60405180910390fd5b80600860008460028111156104e3576104e3611263565b60028111156104f4576104f4611263565b815260200190815260200160002054101561054a5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420696e76656e746f727960501b60448201526064016104c3565b600754604051636604c5fb60e11b81526000916001600160a01b03169063cc098bf69061057b908690600401611297565b602060405180830381865afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc919061115d565b905060006105ca83836112c0565b60025460405163079cc67960e41b8152336004820152602481018390529192506001600160a01b0316906379cc679090604401600060405180830381600087803b15801561061757600080fd5b505af115801561062b573d6000803e3d6000fd5b50505050826008600086600281111561064657610646611263565b600281111561065757610657611263565b8152602001908152602001600020600082825461067491906112d7565b909155505060405133907f0e32514dbaf7f1886ac4330923873113293d0abf52459dffaa2189c2282083b5906106af908790879086906112ea565b60405180910390a250506106c260018055565b5050565b6106ce610f99565b6003546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b919061130b565b6001600160a01b0316146107835760405162461bcd60e51b815260206004820152600f60248201526e2737ba10383630b73a1037bbb732b960891b60448201526064016104c3565b60035460405163d902c92760e01b8152600481018390526001600160a01b039091169063d902c92790602401602060405180830381865afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611328565b61082e5760405162461bcd60e51b815260206004820152600f60248201526e506c616e74206e6f7420726561647960881b60448201526064016104c3565b60035460405163ed0b1f5f60e01b8152600481018390526000916001600160a01b03169063ed0b1f5f9060240160a060405180830381865afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611361565b9050600080825160028111156108b4576108b4611263565b036108c1575060006108e7565b6001825160028111156108d6576108d6611263565b036108e3575060016108e7565b5060025b60075460405163eea138e160e01b81526000916001600160a01b03169063eea138e190610918908590600401611297565b602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610959919061115d565b905060006103e8846040015161ffff168361097491906112c0565b61097e91906113ee565b6002546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156109cb57600080fd5b505af11580156109df573d6000803e3d6000fd5b5050600354604051630852cd8d60e31b8152600481018990526001600160a01b0390911692506342966c689150602401600060405180830381600087803b158015610a2957600080fd5b505af1158015610a3d573d6000803e3d6000fd5b505060408051888152602081018590523393507f1d2744d484bfd6c11eb698d6664c8bf1eb4260fbe4b9f99912e87eff5dd2ff8292500160405180910390a250505050610a8960018055565b50565b610a94610fc3565b610a9e6000610ff0565b565b610aa8610fc3565b6002546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610af657600080fd5b505af1158015610b0a573d6000803e3d6000fd5b505050505050565b610b1a610f99565b6005546040805163ede48fb760e01b815290516000926001600160a01b03169163ede48fb7916004808301926020929190829003018187875af1158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b89919061115d565b60065460405163199c00f760e21b8152600481018390523360248201529192506001600160a01b03169063667003dc906044016080604051808303816000875af1158015610bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bff9190611422565b5060075460405163ae7e8d8160e01b8152600481018390526001600160a01b039091169063ae7e8d8190602401600060405180830381600087803b158015610c4657600080fd5b505af1158015610c5a573d6000803e3d6000fd5b50506040513392508391507fdd8b8ce95c50047bcd62f9d282a770d6b42aa1866ac0ea2bbfe7275ce2fc1e5d90600090a350610a9e60018055565b6000610c9f610f99565b600480546040516331a9108f60e11b815291820184905233916001600160a01b0390911690636352211e90602401602060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e919061130b565b6001600160a01b031614610d555760405162461bcd60e51b815260206004820152600e60248201526d2737ba103630b7321037bbb732b960911b60448201526064016104c3565b600080846002811115610d6a57610d6a611263565b03610d7757506000610d9c565b6001846002811115610d8b57610d8b611263565b03610d9857506001610d9c565b5060025b600354604051632769c3d960e11b81526001600160a01b0390911690634ed387b290610dd09033908590889060040161149f565b6020604051808303816000875af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e13919061115d565b604080518281526020810186905291935033917f443deb677b158d42d9989f309feeb2c861adadb2ea82bd1592611542218579ef910160405180910390a250610e5b60018055565b92915050565b610e69610fc3565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610a89573d6000803e3d6000fd5b610eab610fc3565b60005b60068160ff1610156106c25760005b60088160ff161015610f5557600480546040516306a524d560e31b81526001600160a01b038681169382019390935260ff80851660248301528516604482015291169063352926a8906064016020604051808303816000875af1158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c919061115d565b50600101610ebd565b50600101610eae565b610f66610fc3565b6001600160a01b038116610f9057604051631e4fbdf760e01b8152600060048201526024016104c3565b610a8981610ff0565b600260015403610fbc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000546001600160a01b03163314610a9e5760405163118cdaa760e01b81523360048201526024016104c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610a8957600080fd5b60006020828403121561106757600080fd5b813561107281611040565b9392505050565b60006060820185835260208560208501526060604085015281855180845260808601915060208701935060005b818110156110c2578451835293830193918301916001016110a6565b509098975050505050505050565b60038110610a8957600080fd5b600080604083850312156110f057600080fd5b82356110fb816110d0565b946020939093013593505050565b60006020828403121561111b57600080fd5b5035919050565b60006020828403121561113457600080fd5b8135611072816110d0565b6000806040838503121561115257600080fd5b82356110fb81611040565b60006020828403121561116f57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111b5576111b5611176565b604052919050565b600060208083850312156111d057600080fd5b825167ffffffffffffffff808211156111e857600080fd5b818501915085601f8301126111fc57600080fd5b81518181111561120e5761120e611176565b8060051b915061121f84830161118c565b818152918301840191848101908884111561123957600080fd5b938501935b838510156112575784518252938501939085019061123e565b98975050505050505050565b634e487b7160e01b600052602160045260246000fd5b60038110610a8957634e487b7160e01b600052602160045260246000fd5b602081016112a483611279565b91905290565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e5b57610e5b6112aa565b81810381811115610e5b57610e5b6112aa565b606081016112f785611279565b938152602081019290925260409091015290565b60006020828403121561131d57600080fd5b815161107281611040565b60006020828403121561133a57600080fd5b8151801515811461107257600080fd5b805161ffff8116811461135c57600080fd5b919050565b600060a0828403121561137357600080fd5b60405160a0810181811067ffffffffffffffff8211171561139657611396611176565b60405282516113a4816110d0565b8152602083015160ff811681146113ba57600080fd5b60208201526113cb6040840161134a565b604082015260608301516060820152608083015160808201528091505092915050565b60008261140b57634e487b7160e01b600052601260045260246000fd5b500490565b8051600181900b811461135c57600080fd5b60006080828403121561143457600080fd5b6040516080810181811067ffffffffffffffff8211171561145757611457611176565b60405261146383611410565b815261147160208401611410565b60208201526114826040840161134a565b60408201526114936060840161134a565b60608201529392505050565b6001600160a01b0384168152606081016114b884611279565b60208201939093526040015291905056fea26469706673582212207d3e41f1a6b4495b794e7808a67e2f3a6cb5448282dbb9f882d7aebaccaaa4b164736f6c63430008180033",
  "devdoc": {
    "details": "Orchestrates the entire chain reaction: Buy -> Plant -> Event -> Effect -> Price Change",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "triggerRandomEvent()": {
        "details": "Anyone can trigger events, but effects apply to their own farm"
      }
    },
    "title": "FarmMarketplace",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buySeed(uint8,uint256)": {
        "notice": "Buy seeds from shop using FarmCoin"
      },
      "emergencyWithdraw()": {
        "notice": "Emergency withdraw (owner only)"
      },
      "getPlayerStatus(address)": {
        "notice": "Get player's farm status"
      },
      "giveStarterCoins(address,uint256)": {
        "notice": "Give starter coins to new players"
      },
      "harvestCrop(uint256)": {
        "notice": "Harvest a mature plant"
      },
      "mintStarterLand(address)": {
        "notice": "Mint initial land plots to a new player"
      },
      "plantSeed(uint8,uint256)": {
        "notice": "Plant a seed on owned land"
      },
      "triggerRandomEvent()": {
        "notice": "Trigger random event and apply effects (CHAIN REACTION STARTS HERE!)"
      }
    },
    "notice": "Main marketplace for buying seeds, planting, harvesting, and selling crops",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2116,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4041,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "farmCoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FarmCoin)3746"
      },
      {
        "astId": 4044,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "plantNFT",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PlantNFT)5822"
      },
      {
        "astId": 4047,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "farmLand",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(FarmLand)4023"
      },
      {
        "astId": 4050,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "gameEvents",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(GameEvents)5496"
      },
      {
        "astId": 4053,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "gameEffects",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(GameEffects)5193"
      },
      {
        "astId": 4056,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "priceOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(PriceOracle)6644"
      },
      {
        "astId": 4061,
        "contract": "contracts/FarmMarketplace.sol:FarmMarketplace",
        "label": "seedInventory",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_enum(SeedType)5844,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(FarmCoin)3746": {
        "encoding": "inplace",
        "label": "contract FarmCoin",
        "numberOfBytes": "20"
      },
      "t_contract(FarmLand)4023": {
        "encoding": "inplace",
        "label": "contract FarmLand",
        "numberOfBytes": "20"
      },
      "t_contract(GameEffects)5193": {
        "encoding": "inplace",
        "label": "contract GameEffects",
        "numberOfBytes": "20"
      },
      "t_contract(GameEvents)5496": {
        "encoding": "inplace",
        "label": "contract GameEvents",
        "numberOfBytes": "20"
      },
      "t_contract(PlantNFT)5822": {
        "encoding": "inplace",
        "label": "contract PlantNFT",
        "numberOfBytes": "20"
      },
      "t_contract(PriceOracle)6644": {
        "encoding": "inplace",
        "label": "contract PriceOracle",
        "numberOfBytes": "20"
      },
      "t_enum(SeedType)5844": {
        "encoding": "inplace",
        "label": "enum PriceOracle.SeedType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(SeedType)5844,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(SeedType)5844",
        "label": "mapping(enum PriceOracle.SeedType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}