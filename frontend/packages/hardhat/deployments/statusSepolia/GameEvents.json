{
  "address": "0x05A4930B039ceF4AC69d9E74511268ae6E39e766",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GameEvents.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "severity",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EventTriggered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EVENT_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canTriggerEvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effectsContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventHistory",
      "outputs": [
        {
          "internalType": "enum GameEvents.EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "severity",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMarketInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum GameEvents.EventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "severity",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameEvents.GameEvent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEventsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketIntervalNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getRecentEvents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum GameEvents.EventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "severity",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameEvents.GameEvent[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_effectsContract",
          "type": "address"
        }
      ],
      "name": "setEffectsContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b0f6077a9790cd7e7649e91f3515ff4f3bf2e39266ca184724fa0e1b3a84cf0",
  "receipt": {
    "to": null,
    "from": "0x38048c9AcEF95Cb2866e58Da69dd96B71870c55C",
    "contractAddress": "0x05A4930B039ceF4AC69d9E74511268ae6E39e766",
    "transactionIndex": 0,
    "gasUsed": "762109",
    "logsBloom": "0x
    "blockHash": "0x89fc0bb698bc01bad2a9626a708eddb892c423989438fb988c4aa911f12062e7",
    "transactionHash": "0x5b0f6077a9790cd7e7649e91f3515ff4f3bf2e39266ca184724fa0e1b3a84cf0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11777370,
        "transactionHash": "0x5b0f6077a9790cd7e7649e91f3515ff4f3bf2e39266ca184724fa0e1b3a84cf0",
        "address": "0x05A4930B039ceF4AC69d9E74511268ae6E39e766",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000038048c9acef95cb2866e58da69dd96b71870c55c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x89fc0bb698bc01bad2a9626a708eddb892c423989438fb988c4aa911f12062e7"
      }
    ],
    "blockNumber": 11777370,
    "cumulativeGasUsed": "762109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x38048c9AcEF95Cb2866e58Da69dd96B71870c55C"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c880685ebef2f561b9dccee97fd02f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GameEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EventTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EVENT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canTriggerEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventHistory\",\"outputs\":[{\"internalType\":\"enum GameEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMarketInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"enum GameEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct GameEvents.GameEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketIntervalNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getRecentEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"enum GameEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct GameEvents.GameEvent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_effectsContract\",\"type\":\"address\"}],\"name\":\"setEffectsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameEvents.sol\":\"GameEvents\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/GameEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GameEvents is Ownable {\\n    enum EventType {\\n        NONE,\\n        RAIN,\\n        DROUGHT,\\n        WINTER\\n    }\\n    \\n    struct GameEvent {\\n        EventType eventType;\\n        uint16 severity;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n    \\n    GameEvent[] public eventHistory;\\n    address public effectsContract;\\n    uint256 public lastEventTime;\\n    uint256 public constant EVENT_INTERVAL = 2 minutes;\\n    \\n    event EventTriggered(\\n        uint256 indexed eventId,\\n        EventType eventType,\\n        uint16 severity,\\n        uint256 timestamp\\n    );\\n    \\n    constructor(address initialOwner) Ownable(initialOwner) {\\n        lastEventTime = (block.timestamp / EVENT_INTERVAL) * EVENT_INTERVAL;\\n    }\\n    \\n    function setEffectsContract(address _effectsContract) external onlyOwner {\\n        effectsContract = _effectsContract;\\n    }\\n    \\n    function canTriggerEvent() public view returns (bool) {\\n        uint256 currentRoundedTime = (block.timestamp / EVENT_INTERVAL) * EVENT_INTERVAL;\\n        return currentRoundedTime > lastEventTime;\\n    }\\n    \\n    function triggerEvent() external returns (uint256 eventId) {\\n        require(canTriggerEvent(), \\\"Event already triggered in this interval\\\");\\n        \\n        uint256 currentRoundedTime = (block.timestamp / EVENT_INTERVAL) * EVENT_INTERVAL;\\n        lastEventTime = currentRoundedTime;\\n        \\n        uint256 random = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    currentRoundedTime,\\n                    block.prevrandao,\\n                    block.number\\n                )\\n            )\\n        );\\n        \\n        EventType eventType = _selectEventType(random % 100);\\n        uint16 severity = uint16((random >> 8) % 1001);\\n        \\n        GameEvent memory newEvent = GameEvent({\\n            eventType: eventType,\\n            severity: severity,\\n            timestamp: block.timestamp,\\n            blockNumber: block.number\\n        });\\n        \\n        eventHistory.push(newEvent);\\n        eventId = eventHistory.length - 1;\\n        \\n        emit EventTriggered(eventId, eventType, severity, block.timestamp);\\n        \\n        if (effectsContract != address(0)) {\\n            (bool success, ) = effectsContract.call(\\n                abi.encodeWithSignature(\\n                    \\\"applyEventEffects(uint8,uint16)\\\",\\n                    uint8(eventType),\\n                    severity\\n                )\\n            );\\n            require(success, \\\"Effects contract call failed\\\");\\n        }\\n        \\n        return eventId;\\n    }\\n    \\n    function _selectEventType(uint256 roll) internal pure returns (EventType) {\\n        if (roll < 40) return EventType.NONE;\\n        if (roll < 65) return EventType.RAIN;\\n        if (roll < 85) return EventType.DROUGHT;\\n        return EventType.WINTER;\\n    }\\n    \\n    function getEvent(uint256 eventId) external view returns (GameEvent memory) {\\n        require(eventId < eventHistory.length, \\\"Event does not exist\\\");\\n        return eventHistory[eventId];\\n    }\\n    \\n    function getEventsCount() external view returns (uint256) {\\n        return eventHistory.length;\\n    }\\n    \\n    function getCurrentMarketInterval() external view returns (uint256) {\\n        return (block.timestamp / 5 minutes) * 5 minutes;\\n    }\\n    \\n    function getMarketIntervalNumber() external view returns (uint256) {\\n        return block.timestamp / 5 minutes;\\n    }\\n    \\n    function getRecentEvents(uint256 count) external view returns (GameEvent[] memory) {\\n        uint256 total = eventHistory.length;\\n        if (count > total) count = total;\\n        \\n        GameEvent[] memory recent = new GameEvent[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            recent[i] = eventHistory[total - count + i];\\n        }\\n        \\n        return recent;\\n    }\\n}\\n\",\"keccak256\":\"0x61c1ceb2f9b46fde821d7b68ca00583ec9b77159a3a70c5d7ad1d5bda74771ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d47380380610d4783398101604081905261002f916100d7565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610087565b5060786100748142610107565b61007e9190610129565b60035550610154565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e957600080fd5b81516001600160a01b038116811461010057600080fd5b9392505050565b60008261012457634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761014e57634e487b7160e01b600052601160045260246000fd5b92915050565b610be4806101636000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370e9e62311610097578063a7697eca11610066578063a7697eca146101db578063deca7606146101f3578063ede48fb714610206578063f2fde38b1461020e57600080fd5b806370e9e62314610179578063715018a6146101995780638da5cb5b146101a357806398ec739c146101c857600080fd5b806336cc0505116100d357806336cc0505146101265780634803b90d1461012e57806367a18913146101515780636d1884e01461015957600080fd5b80631f20cb71146100fa5780632b51b2691461011657806330366d5f1461011e575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b610103610221565b600154610103565b610103607881565b61014161013c36600461095e565b610234565b60405161010d94939291906109af565b610103610276565b61016c61016736600461095e565b610290565b60405161010d9190610a0d565b61018c61018736600461095e565b610390565b60405161010d9190610a21565b6101a16104e9565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010d565b6101a16101d6366004610a6f565b6104fd565b6101e3610527565b604051901515815260200161010d565b6002546101b0906001600160a01b031681565b61010361054a565b6101a161021c366004610a6f565b610866565b600061022f61012c42610acb565b905090565b6001818154811061024457600080fd5b600091825260209091206003909102018054600182015460029092015460ff8216935061010090910461ffff16919084565b600061028461012c42610acb565b61022f9061012c610adf565b60408051608081018252600080825260208201819052918101829052606081019190915260015482106103015760405162461bcd60e51b8152602060048201526014602482015273115d995b9d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064015b60405180910390fd5b6001828154811061031457610314610af6565b90600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff16600381111561035157610351610977565b600381111561036257610362610977565b81528154610100900461ffff1660208201526001820154604082015260029091015460609091015292915050565b600154606090808311156103a2578092505b60008367ffffffffffffffff8111156103bd576103bd610b0c565b60405190808252806020026020018201604052801561040f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816103db5790505b50905060005b848110156104e15760018161042a8786610b22565b6104349190610b35565b8154811061044457610444610af6565b90600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff16600381111561048157610481610977565b600381111561049257610492610977565b81528154610100900461ffff1660208201526001820154604082015260029091015460609091015282518390839081106104ce576104ce610af6565b6020908102919091010152600101610415565b509392505050565b6104f16108a4565b6104fb60006108d1565b565b6105056108a4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008060786105368142610acb565b6105409190610adf565b6003541092915050565b6000610554610527565b6105b15760405162461bcd60e51b815260206004820152602860248201527f4576656e7420616c72656164792074726967676572656420696e2074686973206044820152671a5b9d195c9d985b60c21b60648201526084016102f8565b600060786105bf8142610acb565b6105c99190610adf565b600381905560408051602080820184905244828401524360608084019190915283518084039091018152608090920190925280519101209091506000610618610613606484610b48565b610921565b9050600061062c6103e9600885901c610b48565b90506000604051806080016040528084600381111561064d5761064d610977565b815261ffff84166020820152426040820152436060909101526001805480820182556000829052825160039182027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054949550859490939192849260ff19909216919084908111156106c3576106c3610977565b02179055506020820151815461ffff9091166101000262ffff00199091161781556040820151600180830191909155606090920151600290910155805461070a9190610b22565b9550857f66866f9f4804f83ab9720333b769bc5f8575f4113585c9526c1570592c291e1484844260405161074093929190610b5c565b60405180910390a26002546001600160a01b03161561085e576002546000906001600160a01b031684600381111561077a5761077a610977565b60405160ff909116602482015261ffff8516604482015260640160408051601f198184030181529181526020820180516001600160e01b031663aeca5f8160e01b179052516107c99190610b7f565b6000604051808303816000865af19150503d8060008114610806576040519150601f19603f3d011682016040523d82523d6000602084013e61080b565b606091505b505090508061085c5760405162461bcd60e51b815260206004820152601c60248201527f4566666563747320636f6e74726163742063616c6c206661696c65640000000060448201526064016102f8565b505b505050505090565b61086e6108a4565b6001600160a01b03811661089857604051631e4fbdf760e01b8152600060048201526024016102f8565b6108a1816108d1565b50565b6000546001600160a01b031633146104fb5760405163118cdaa760e01b81523360048201526024016102f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602882101561093457506000919050565b604182101561094557506001919050565b605582101561095657506002919050565b506003919050565b60006020828403121561097057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600481106109ab57634e487b7160e01b600052602160045260246000fd5b9052565b608081016109bd828761098d565b61ffff8516602083015283604083015282606083015295945050505050565b6109e782825161098d565b61ffff602082015116602083015260408101516040830152606081015160608301525050565b60808101610a1b82846109dc565b92915050565b6020808252825182820181905260009190848201906040850190845b81811015610a6357610a508385516109dc565b9284019260809290920191600101610a3d565b50909695505050505050565b600060208284031215610a8157600080fd5b81356001600160a01b0381168114610a9857600080fd5b9392505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082610ada57610ada610a9f565b500490565b8082028115828204841417610a1b57610a1b610ab5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81810381811115610a1b57610a1b610ab5565b80820180821115610a1b57610a1b610ab5565b600082610b5757610b57610a9f565b500690565b60608101610b6a828661098d565b61ffff93909316602082015260400152919050565b6000825160005b81811015610ba05760208186018101518583015201610b86565b50600092019182525091905056fea2646970667358221220291efa16e19868ba7a04769a04ca15432a3fd0f498ccd00dfe974225137cab1664736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806370e9e62311610097578063a7697eca11610066578063a7697eca146101db578063deca7606146101f3578063ede48fb714610206578063f2fde38b1461020e57600080fd5b806370e9e62314610179578063715018a6146101995780638da5cb5b146101a357806398ec739c146101c857600080fd5b806336cc0505116100d357806336cc0505146101265780634803b90d1461012e57806367a18913146101515780636d1884e01461015957600080fd5b80631f20cb71146100fa5780632b51b2691461011657806330366d5f1461011e575b600080fd5b61010360035481565b6040519081526020015b60405180910390f35b610103610221565b600154610103565b610103607881565b61014161013c36600461095e565b610234565b60405161010d94939291906109af565b610103610276565b61016c61016736600461095e565b610290565b60405161010d9190610a0d565b61018c61018736600461095e565b610390565b60405161010d9190610a21565b6101a16104e9565b005b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010d565b6101a16101d6366004610a6f565b6104fd565b6101e3610527565b604051901515815260200161010d565b6002546101b0906001600160a01b031681565b61010361054a565b6101a161021c366004610a6f565b610866565b600061022f61012c42610acb565b905090565b6001818154811061024457600080fd5b600091825260209091206003909102018054600182015460029092015460ff8216935061010090910461ffff16919084565b600061028461012c42610acb565b61022f9061012c610adf565b60408051608081018252600080825260208201819052918101829052606081019190915260015482106103015760405162461bcd60e51b8152602060048201526014602482015273115d995b9d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064015b60405180910390fd5b6001828154811061031457610314610af6565b90600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff16600381111561035157610351610977565b600381111561036257610362610977565b81528154610100900461ffff1660208201526001820154604082015260029091015460609091015292915050565b600154606090808311156103a2578092505b60008367ffffffffffffffff8111156103bd576103bd610b0c565b60405190808252806020026020018201604052801561040f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816103db5790505b50905060005b848110156104e15760018161042a8786610b22565b6104349190610b35565b8154811061044457610444610af6565b90600052602060002090600302016040518060800160405290816000820160009054906101000a900460ff16600381111561048157610481610977565b600381111561049257610492610977565b81528154610100900461ffff1660208201526001820154604082015260029091015460609091015282518390839081106104ce576104ce610af6565b6020908102919091010152600101610415565b509392505050565b6104f16108a4565b6104fb60006108d1565b565b6105056108a4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60008060786105368142610acb565b6105409190610adf565b6003541092915050565b6000610554610527565b6105b15760405162461bcd60e51b815260206004820152602860248201527f4576656e7420616c72656164792074726967676572656420696e2074686973206044820152671a5b9d195c9d985b60c21b60648201526084016102f8565b600060786105bf8142610acb565b6105c99190610adf565b600381905560408051602080820184905244828401524360608084019190915283518084039091018152608090920190925280519101209091506000610618610613606484610b48565b610921565b9050600061062c6103e9600885901c610b48565b90506000604051806080016040528084600381111561064d5761064d610977565b815261ffff84166020820152426040820152436060909101526001805480820182556000829052825160039182027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054949550859490939192849260ff19909216919084908111156106c3576106c3610977565b02179055506020820151815461ffff9091166101000262ffff00199091161781556040820151600180830191909155606090920151600290910155805461070a9190610b22565b9550857f66866f9f4804f83ab9720333b769bc5f8575f4113585c9526c1570592c291e1484844260405161074093929190610b5c565b60405180910390a26002546001600160a01b03161561085e576002546000906001600160a01b031684600381111561077a5761077a610977565b60405160ff909116602482015261ffff8516604482015260640160408051601f198184030181529181526020820180516001600160e01b031663aeca5f8160e01b179052516107c99190610b7f565b6000604051808303816000865af19150503d8060008114610806576040519150601f19603f3d011682016040523d82523d6000602084013e61080b565b606091505b505090508061085c5760405162461bcd60e51b815260206004820152601c60248201527f4566666563747320636f6e74726163742063616c6c206661696c65640000000060448201526064016102f8565b505b505050505090565b61086e6108a4565b6001600160a01b03811661089857604051631e4fbdf760e01b8152600060048201526024016102f8565b6108a1816108d1565b50565b6000546001600160a01b031633146104fb5760405163118cdaa760e01b81523360048201526024016102f8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602882101561093457506000919050565b604182101561094557506001919050565b605582101561095657506002919050565b506003919050565b60006020828403121561097057600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600481106109ab57634e487b7160e01b600052602160045260246000fd5b9052565b608081016109bd828761098d565b61ffff8516602083015283604083015282606083015295945050505050565b6109e782825161098d565b61ffff602082015116602083015260408101516040830152606081015160608301525050565b60808101610a1b82846109dc565b92915050565b6020808252825182820181905260009190848201906040850190845b81811015610a6357610a508385516109dc565b9284019260809290920191600101610a3d565b50909695505050505050565b600060208284031215610a8157600080fd5b81356001600160a01b0381168114610a9857600080fd5b9392505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082610ada57610ada610a9f565b500490565b8082028115828204841417610a1b57610a1b610ab5565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b81810381811115610a1b57610a1b610ab5565b80820180821115610a1b57610a1b610ab5565b600082610b5757610b57610a9f565b500690565b60608101610b6a828661098d565b61ffff93909316602082015260400152919050565b6000825160005b81811015610ba05760208186018101518583015201610b86565b50600092019182525091905056fea2646970667358221220291efa16e19868ba7a04769a04ca15432a3fd0f498ccd00dfe974225137cab1664736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 387,
        "contract": "contracts/GameEvents.sol:GameEvents",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7489,
        "contract": "contracts/GameEvents.sol:GameEvents",
        "label": "eventHistory",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(GameEvent)7485_storage)dyn_storage"
      },
      {
        "astId": 7491,
        "contract": "contracts/GameEvents.sol:GameEvents",
        "label": "effectsContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7493,
        "contract": "contracts/GameEvents.sol:GameEvents",
        "label": "lastEventTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(GameEvent)7485_storage)dyn_storage": {
        "base": "t_struct(GameEvent)7485_storage",
        "encoding": "dynamic_array",
        "label": "struct GameEvents.GameEvent[]",
        "numberOfBytes": "32"
      },
      "t_enum(EventType)7475": {
        "encoding": "inplace",
        "label": "enum GameEvents.EventType",
        "numberOfBytes": "1"
      },
      "t_struct(GameEvent)7485_storage": {
        "encoding": "inplace",
        "label": "struct GameEvents.GameEvent",
        "members": [
          {
            "astId": 7478,
            "contract": "contracts/GameEvents.sol:GameEvents",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EventType)7475"
          },
          {
            "astId": 7480,
            "contract": "contracts/GameEvents.sol:GameEvents",
            "label": "severity",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7482,
            "contract": "contracts/GameEvents.sol:GameEvents",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7484,
            "contract": "contracts/GameEvents.sol:GameEvents",
            "label": "blockNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}