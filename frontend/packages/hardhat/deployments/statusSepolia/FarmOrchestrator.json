{
  "address": "0x21a4eF5e6916Fe10e7F160AEb8f499c47ED00743",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmEvents",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmEffects",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "GardenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seedHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "committer",
          "type": "address"
        }
      ],
      "name": "RoundCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "resultHash",
          "type": "bytes32"
        }
      ],
      "name": "RoundExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "KEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "seedHash",
          "type": "bytes32"
        }
      ],
      "name": "commitRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createGarden",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "revealSeed",
          "type": "bytes"
        }
      ],
      "name": "executeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmEffects",
      "outputs": [
        {
          "internalType": "contract IFarmEffects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmEvents",
      "outputs": [
        {
          "internalType": "contract IFarmEvents",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gardenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gardens",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "plantCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "totalGrowth",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "totalHealth",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "lastRoundExecuted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        }
      ],
      "name": "getGarden",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "plantCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "totalGrowth",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "totalHealth",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "lastRoundExecuted",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct FarmOrchestrator.Garden",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getRoundResult",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum IFarmEvents.EventType",
                  "name": "eventType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "severity",
                  "type": "uint16"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "seed",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IFarmEvents.EventData",
              "name": "eventData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int16",
                  "name": "growthDelta",
                  "type": "int16"
                },
                {
                  "internalType": "int16",
                  "name": "healthDelta",
                  "type": "int16"
                },
                {
                  "internalType": "uint16",
                  "name": "yieldModifier",
                  "type": "uint16"
                },
                {
                  "internalType": "uint32",
                  "name": "timestamp",
                  "type": "uint32"
                }
              ],
              "internalType": "struct IFarmEffects.EffectResult",
              "name": "effectResult",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "pricesUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmOrchestrator.RoundResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gardenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "isRoundExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketManager",
      "outputs": [
        {
          "internalType": "contract IMarketManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundMetas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "seedHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "revealedSeed",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "committed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "resultHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundResults",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IFarmEvents.EventType",
              "name": "eventType",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "severity",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "seed",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IFarmEvents.EventData",
          "name": "eventData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int16",
              "name": "growthDelta",
              "type": "int16"
            },
            {
              "internalType": "int16",
              "name": "healthDelta",
              "type": "int16"
            },
            {
              "internalType": "uint16",
              "name": "yieldModifier",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct IFarmEffects.EffectResult",
          "name": "effectResult",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pricesUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executedAt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmEvents",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmEffects",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketManager",
          "type": "address"
        }
      ],
      "name": "updateContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfed43e4db8f77655e23a1ded6e781bc3bd495aead50fe5183d6d1c4e0dd1a526",
  "receipt": {
    "to": null,
    "from": "0x38048c9AcEF95Cb2866e58Da69dd96B71870c55C",
    "contractAddress": "0x21a4eF5e6916Fe10e7F160AEb8f499c47ED00743",
    "transactionIndex": 0,
    "gasUsed": "1668861",
    "logsBloom": "0x
    "blockHash": "0xb7543e22321d1b2fef8bd7c9be21a5d88c42c85ff55121620a7f786891796757",
    "transactionHash": "0xfed43e4db8f77655e23a1ded6e781bc3bd495aead50fe5183d6d1c4e0dd1a526",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11777358,
        "transactionHash": "0xfed43e4db8f77655e23a1ded6e781bc3bd495aead50fe5183d6d1c4e0dd1a526",
        "address": "0x21a4eF5e6916Fe10e7F160AEb8f499c47ED00743",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000038048c9acef95cb2866e58da69dd96b71870c55c",
          "0x00000000000000000000000038048c9acef95cb2866e58da69dd96b71870c55c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb7543e22321d1b2fef8bd7c9be21a5d88c42c85ff55121620a7f786891796757"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 11777358,
        "transactionHash": "0xfed43e4db8f77655e23a1ded6e781bc3bd495aead50fe5183d6d1c4e0dd1a526",
        "address": "0x21a4eF5e6916Fe10e7F160AEb8f499c47ED00743",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab",
          "0x00000000000000000000000038048c9acef95cb2866e58da69dd96b71870c55c",
          "0x00000000000000000000000038048c9acef95cb2866e58da69dd96b71870c55c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb7543e22321d1b2fef8bd7c9be21a5d88c42c85ff55121620a7f786891796757"
      }
    ],
    "blockNumber": 11777358,
    "cumulativeGasUsed": "1668861",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe53C4e69fE14fE4f85ffA4E946F6172d93eE2305",
    "0xe5e1235558512df2594FbC2Ea89b7bF887234341",
    "0xDCd1E455b8aa2f28Dc3A21d033e46590026bD937"
  ],
  "numDeployments": 1,
  "solcInputHash": "2c880685ebef2f561b9dccee97fd02f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmEffects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"GardenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"}],\"name\":\"RoundCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resultHash\",\"type\":\"bytes32\"}],\"name\":\"RoundExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"}],\"name\":\"commitRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createGarden\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"revealSeed\",\"type\":\"bytes\"}],\"name\":\"executeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmEffects\",\"outputs\":[{\"internalType\":\"contract IFarmEffects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmEvents\",\"outputs\":[{\"internalType\":\"contract IFarmEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gardenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gardens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"plantCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalGrowth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalHealth\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lastRoundExecuted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"}],\"name\":\"getGarden\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"plantCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalGrowth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalHealth\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"lastRoundExecuted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct FarmOrchestrator.Garden\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundResult\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum IFarmEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFarmEvents.EventData\",\"name\":\"eventData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"growthDelta\",\"type\":\"int16\"},{\"internalType\":\"int16\",\"name\":\"healthDelta\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"yieldModifier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct IFarmEffects.EffectResult\",\"name\":\"effectResult\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pricesUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmOrchestrator.RoundResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gardenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"isRoundExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketManager\",\"outputs\":[{\"internalType\":\"contract IMarketManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundMetas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"revealedSeed\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"committed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"resultHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundResults\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IFarmEvents.EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"severity\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFarmEvents.EventData\",\"name\":\"eventData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int16\",\"name\":\"growthDelta\",\"type\":\"int16\"},{\"internalType\":\"int16\",\"name\":\"healthDelta\",\"type\":\"int16\"},{\"internalType\":\"uint16\",\"name\":\"yieldModifier\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct IFarmEffects.EffectResult\",\"name\":\"effectResult\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pricesUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmEffects\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketManager\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442 commit-reveal \\u0441\\u0445\\u0435\\u043c\\u0443 \\u0434\\u043b\\u044f RNG \\u0438 \\u0433\\u0430\\u0440\\u0430\\u043d\\u0442\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0438\\u0434\\u0435\\u043c\\u043f\\u043e\\u0442\\u0435\\u043d\\u0442\\u043d\\u043e\\u0441\\u0442\\u044c\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"FarmOrchestrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"commitRound(uint256,uint256,bytes32)\":{\"notice\":\"Commit \\u0444\\u0430\\u0437\\u0430: keeper \\u043a\\u043e\\u043c\\u043c\\u0438\\u0442\\u0438\\u0442 hash seed'\\u0430\"},\"createGarden()\":{\"notice\":\"\\u0421\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u0435 \\u043d\\u043e\\u0432\\u043e\\u0433\\u043e \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\"},\"executeRound(uint256,uint256,bytes)\":{\"notice\":\"Execute \\u0444\\u0430\\u0437\\u0430: keeper \\u0440\\u0430\\u0441\\u043a\\u0440\\u044b\\u0432\\u0430\\u0435\\u0442 seed \\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u044f\\u0435\\u0442 \\u0440\\u0430\\u0443\\u043d\\u0434\"},\"getGarden(uint256)\":{\"notice\":\"\\u041f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u0442\\u0435\\u043a\\u0443\\u0449\\u0435\\u0435 \\u0441\\u043e\\u0441\\u0442\\u043e\\u044f\\u043d\\u0438\\u0435 \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\"},\"getRoundResult(uint256,uint256)\":{\"notice\":\"\\u041f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442 \\u0440\\u0430\\u0443\\u043d\\u0434\\u0430\"},\"isRoundExecuted(uint256,uint256)\":{\"notice\":\"\\u041f\\u0440\\u043e\\u0432\\u0435\\u0440\\u0438\\u0442\\u044c, \\u0431\\u044b\\u043b \\u043b\\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d \\u0440\\u0430\\u0443\\u043d\\u0434\"},\"updateContracts(address,address,address)\":{\"notice\":\"\\u041e\\u0431\\u043d\\u043e\\u0432\\u0438\\u0442\\u044c \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u043a\\u043e\\u043d\\u0442\\u0440\\u0430\\u043a\\u0442\\u043e\\u0432 (\\u0442\\u043e\\u043b\\u044c\\u043a\\u043e admin)\"}},\"notice\":\"\\u041a\\u043e\\u043e\\u0440\\u0434\\u0438\\u043d\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u0435 \\u0440\\u0430\\u0443\\u043d\\u0434\\u043e\\u0432: Events -> Effects -> Market\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FarmOrchestrator.sol\":\"FarmOrchestrator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/FarmOrchestrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IFarmEvents.sol\\\";\\nimport \\\"./interfaces/IFarmEffects.sol\\\";\\nimport \\\"./interfaces/IMarketManager.sol\\\";\\n\\n/**\\n * @title FarmOrchestrator\\n * @notice \\u041a\\u043e\\u043e\\u0440\\u0434\\u0438\\u043d\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u0435 \\u0440\\u0430\\u0443\\u043d\\u0434\\u043e\\u0432: Events -> Effects -> Market\\n * @dev \\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442 commit-reveal \\u0441\\u0445\\u0435\\u043c\\u0443 \\u0434\\u043b\\u044f RNG \\u0438 \\u0433\\u0430\\u0440\\u0430\\u043d\\u0442\\u0438\\u0440\\u0443\\u0435\\u0442 \\u0438\\u0434\\u0435\\u043c\\u043f\\u043e\\u0442\\u0435\\u043d\\u0442\\u043d\\u043e\\u0441\\u0442\\u044c\\n */\\ncontract FarmOrchestrator is AccessControl, ReentrancyGuard {\\n    bytes32 public constant KEEPER_ROLE = keccak256(\\\"KEEPER_ROLE\\\");\\n    \\n    // \\u0421\\u0442\\u0440\\u0443\\u043a\\u0442\\u0443\\u0440\\u0430 \\u0434\\u0430\\u043d\\u043d\\u044b\\u0445 \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\\n    struct Garden {\\n        address owner;\\n        uint16 plantCount;\\n        uint16 totalGrowth;\\n        uint16 totalHealth;\\n        uint256 lastRoundExecuted;\\n        bool exists;\\n    }\\n\\n    // \\u041c\\u0435\\u0442\\u0430\\u0434\\u0430\\u043d\\u043d\\u044b\\u0435 \\u0440\\u0430\\u0443\\u043d\\u0434\\u0430\\n    struct RoundMeta {\\n        uint256 id;\\n        uint256 timestamp;\\n        bytes32 seedHash;      // Committed hash\\n        bytes32 revealedSeed;  // Revealed seed\\n        bool committed;\\n        bool executed;\\n        bytes32 resultHash;    // Hash \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u043e\\u0432 \\u0434\\u043b\\u044f \\u0432\\u0435\\u0440\\u0438\\u0444\\u0438\\u043a\\u0430\\u0446\\u0438\\u0438\\n    }\\n\\n    // \\u0420\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d\\u0438\\u044f \\u0440\\u0430\\u0443\\u043d\\u0434\\u0430\\n    struct RoundResult {\\n        IFarmEvents.EventData eventData;\\n        IFarmEffects.EffectResult effectResult;\\n        uint256 pricesUpdated;\\n        uint256 executedAt;\\n    }\\n\\n    // Storage\\n    mapping(uint256 => Garden) public gardens;\\n    mapping(uint256 => mapping(uint256 => RoundMeta)) public roundMetas;  // gardenId => roundId => RoundMeta\\n    mapping(uint256 => mapping(uint256 => RoundResult)) public roundResults; // gardenId => roundId => RoundResult\\n    \\n    uint256 public gardenCounter;\\n    uint256 public constant ROUND_INTERVAL = 20; // seconds\\n\\n    // Contract references\\n    IFarmEvents public farmEvents;\\n    IFarmEffects public farmEffects;\\n    IMarketManager public marketManager;\\n\\n    // Events\\n    event GardenCreated(uint256 indexed gardenId, address indexed owner);\\n    event RoundCommitted(uint256 indexed gardenId, uint256 indexed roundId, bytes32 seedHash, address committer);\\n    event RoundExecuted(uint256 indexed gardenId, uint256 indexed roundId, bytes32 seed, bytes32 resultHash);\\n    \\n    constructor(\\n        address _farmEvents,\\n        address _farmEffects,\\n        address _marketManager\\n    ) {\\n        require(_farmEvents != address(0), \\\"Invalid FarmEvents address\\\");\\n        require(_farmEffects != address(0), \\\"Invalid FarmEffects address\\\");\\n        require(_marketManager != address(0), \\\"Invalid MarketManager address\\\");\\n\\n        farmEvents = IFarmEvents(_farmEvents);\\n        farmEffects = IFarmEffects(_farmEffects);\\n        marketManager = IMarketManager(_marketManager);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(KEEPER_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice \\u0421\\u043e\\u0437\\u0434\\u0430\\u043d\\u0438\\u0435 \\u043d\\u043e\\u0432\\u043e\\u0433\\u043e \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\\n     */\\n    function createGarden() external returns (uint256) {\\n        gardenCounter++;\\n        uint256 gardenId = gardenCounter;\\n        \\n        gardens[gardenId] = Garden({\\n            owner: msg.sender,\\n            plantCount: 5,  // \\u041d\\u0430\\u0447\\u0430\\u043b\\u044c\\u043d\\u043e\\u0435 \\u043a\\u043e\\u043b\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043e \\u0440\\u0430\\u0441\\u0442\\u0435\\u043d\\u0438\\u0439\\n            totalGrowth: 500,  // 50% \\u043d\\u0430\\u0447\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 \\u0440\\u043e\\u0441\\u0442\\n            totalHealth: 1000, // 100% \\u0437\\u0434\\u043e\\u0440\\u043e\\u0432\\u044c\\u0435\\n            lastRoundExecuted: 0,\\n            exists: true\\n        });\\n\\n        emit GardenCreated(gardenId, msg.sender);\\n        return gardenId;\\n    }\\n\\n    /**\\n     * @notice Commit \\u0444\\u0430\\u0437\\u0430: keeper \\u043a\\u043e\\u043c\\u043c\\u0438\\u0442\\u0438\\u0442 hash seed'\\u0430\\n     */\\n    function commitRound(\\n        uint256 gardenId,\\n        uint256 roundId,\\n        bytes32 seedHash\\n    ) external onlyRole(KEEPER_ROLE) {\\n        require(gardens[gardenId].exists, \\\"Garden does not exist\\\");\\n        require(!roundMetas[gardenId][roundId].committed, \\\"Round already committed\\\");\\n        require(seedHash != bytes32(0), \\\"Invalid seed hash\\\");\\n\\n        roundMetas[gardenId][roundId] = RoundMeta({\\n            id: roundId,\\n            timestamp: block.timestamp,\\n            seedHash: seedHash,\\n            revealedSeed: bytes32(0),\\n            committed: true,\\n            executed: false,\\n            resultHash: bytes32(0)\\n        });\\n\\n        emit RoundCommitted(gardenId, roundId, seedHash, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute \\u0444\\u0430\\u0437\\u0430: keeper \\u0440\\u0430\\u0441\\u043a\\u0440\\u044b\\u0432\\u0430\\u0435\\u0442 seed \\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u044f\\u0435\\u0442 \\u0440\\u0430\\u0443\\u043d\\u0434\\n     */\\n    function executeRound(\\n        uint256 gardenId,\\n        uint256 roundId,\\n        bytes calldata revealSeed\\n    ) external onlyRole(KEEPER_ROLE) nonReentrant {\\n        require(gardens[gardenId].exists, \\\"Garden does not exist\\\");\\n        RoundMeta storage meta = roundMetas[gardenId][roundId];\\n        \\n        require(meta.committed, \\\"Round not committed\\\");\\n        require(!meta.executed, \\\"Round already executed\\\");\\n        require(keccak256(revealSeed) == meta.seedHash, \\\"Invalid reveal\\\");\\n\\n        // \\u0413\\u0435\\u043d\\u0435\\u0440\\u0438\\u0440\\u0443\\u0435\\u043c \\u0444\\u0438\\u043d\\u0430\\u043b\\u044c\\u043d\\u044b\\u0439 seed \\u0441 \\u0434\\u043e\\u043f\\u043e\\u043b\\u043d\\u0438\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e\\u0439 \\u044d\\u043d\\u0442\\u0440\\u043e\\u043f\\u0438\\u0435\\u0439\\n        bytes32 finalSeed = keccak256(\\n            abi.encodePacked(\\n                revealSeed,\\n                blockhash(block.number - 1),\\n                gardenId,\\n                roundId,\\n                block.timestamp\\n            )\\n        );\\n\\n        meta.revealedSeed = finalSeed;\\n\\n        // 1. \\u0413\\u0435\\u043d\\u0435\\u0440\\u0438\\u0440\\u0443\\u0435\\u043c \\u0441\\u043e\\u0431\\u044b\\u0442\\u0438\\u0435\\n        IFarmEvents.EventData memory eventData = farmEvents.generateEvent(\\n            gardenId,\\n            roundId,\\n            finalSeed\\n        );\\n\\n        // 2. \\u041f\\u0440\\u0438\\u043c\\u0435\\u043d\\u044f\\u0435\\u043c \\u044d\\u0444\\u0444\\u0435\\u043a\\u0442\\n        IFarmEffects.EffectResult memory effectResult = farmEffects.applyEffect(\\n            gardenId,\\n            roundId,\\n            eventData\\n        );\\n\\n        // \\u041e\\u0431\\u043d\\u043e\\u0432\\u043b\\u044f\\u0435\\u043c \\u0441\\u043e\\u0441\\u0442\\u043e\\u044f\\u043d\\u0438\\u0435 \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\\n        Garden storage garden = gardens[gardenId];\\n        garden.totalGrowth = uint16(_clampToUint16(int256(uint256(garden.totalGrowth)) + int256(effectResult.growthDelta)));\\n        garden.totalHealth = uint16(_clampToUint16(int256(uint256(garden.totalHealth)) + int256(effectResult.healthDelta)));\\n        garden.lastRoundExecuted = roundId;\\n\\n        // 3. \\u041e\\u0431\\u043d\\u043e\\u0432\\u043b\\u044f\\u0435\\u043c \\u0440\\u044b\\u043d\\u043e\\u043a\\n        IMarketManager.PriceChange[] memory priceChanges = marketManager.recalculatePrices(\\n            roundId,\\n            effectResult\\n        );\\n\\n        // \\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u044f\\u0435\\u043c \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u044b\\n        roundResults[gardenId][roundId] = RoundResult({\\n            eventData: eventData,\\n            effectResult: effectResult,\\n            pricesUpdated: priceChanges.length,\\n            executedAt: block.timestamp\\n        });\\n\\n        // \\u0412\\u044b\\u0447\\u0438\\u0441\\u043b\\u044f\\u0435\\u043c hash \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442\\u0430 \\u0434\\u043b\\u044f \\u0432\\u0435\\u0440\\u0438\\u0444\\u0438\\u043a\\u0430\\u0446\\u0438\\u0438\\n        bytes32 resultHash = keccak256(\\n            abi.encodePacked(\\n                finalSeed,\\n                uint8(eventData.eventType),\\n                eventData.severity,\\n                effectResult.growthDelta,\\n                effectResult.healthDelta\\n            )\\n        );\\n\\n        meta.executed = true;\\n        meta.resultHash = resultHash;\\n\\n        emit RoundExecuted(gardenId, roundId, finalSeed, resultHash);\\n    }\\n\\n    /**\\n     * @notice \\u041f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u0442\\u0435\\u043a\\u0443\\u0449\\u0435\\u0435 \\u0441\\u043e\\u0441\\u0442\\u043e\\u044f\\u043d\\u0438\\u0435 \\u043e\\u0433\\u043e\\u0440\\u043e\\u0434\\u0430\\n     */\\n    function getGarden(uint256 gardenId) external view returns (Garden memory) {\\n        require(gardens[gardenId].exists, \\\"Garden does not exist\\\");\\n        return gardens[gardenId];\\n    }\\n\\n    /**\\n     * @notice \\u041f\\u043e\\u043b\\u0443\\u0447\\u0438\\u0442\\u044c \\u0440\\u0435\\u0437\\u0443\\u043b\\u044c\\u0442\\u0430\\u0442 \\u0440\\u0430\\u0443\\u043d\\u0434\\u0430\\n     */\\n    function getRoundResult(\\n        uint256 gardenId,\\n        uint256 roundId\\n    ) external view returns (RoundResult memory) {\\n        return roundResults[gardenId][roundId];\\n    }\\n\\n    /**\\n     * @notice \\u041f\\u0440\\u043e\\u0432\\u0435\\u0440\\u0438\\u0442\\u044c, \\u0431\\u044b\\u043b \\u043b\\u0438 \\u0432\\u044b\\u043f\\u043e\\u043b\\u043d\\u0435\\u043d \\u0440\\u0430\\u0443\\u043d\\u0434\\n     */\\n    function isRoundExecuted(\\n        uint256 gardenId,\\n        uint256 roundId\\n    ) external view returns (bool) {\\n        return roundMetas[gardenId][roundId].executed;\\n    }\\n\\n    /**\\n     * @dev \\u041f\\u0440\\u0438\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c \\u0434\\u0435\\u043b\\u044c\\u0442\\u0443 \\u043a \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044e \\u0441 \\u0433\\u0440\\u0430\\u043d\\u0438\\u0446\\u0430\\u043c\\u0438 \\u0438 \\u0432\\u0435\\u0440\\u043d\\u0443\\u0442\\u044c uint16\\n     */\\n    function _clampToUint16(int256 value) internal pure returns (uint256) {\\n        if (value < 0) return 0;\\n        if (value > 1000) return 1000;\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @notice \\u041e\\u0431\\u043d\\u043e\\u0432\\u0438\\u0442\\u044c \\u0430\\u0434\\u0440\\u0435\\u0441\\u0430 \\u043a\\u043e\\u043d\\u0442\\u0440\\u0430\\u043a\\u0442\\u043e\\u0432 (\\u0442\\u043e\\u043b\\u044c\\u043a\\u043e admin)\\n     */\\n    function updateContracts(\\n        address _farmEvents,\\n        address _farmEffects,\\n        address _marketManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_farmEvents != address(0)) farmEvents = IFarmEvents(_farmEvents);\\n        if (_farmEffects != address(0)) farmEffects = IFarmEffects(_farmEffects);\\n        if (_marketManager != address(0)) marketManager = IMarketManager(_marketManager);\\n    }\\n}\\n\",\"keccak256\":\"0xef3378159bbe5db772a25549da8c405d6a417d0821a4fc51aa236d222c4eac36\",\"license\":\"MIT\"},\"contracts/interfaces/IFarmEffects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFarmEvents.sol\\\";\\n\\ninterface IFarmEffects {\\n    struct EffectResult {\\n        int16 growthDelta;     // \\u0418\\u0437\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u0435 \\u0440\\u043e\\u0441\\u0442\\u0430 (-1000 to +1000)\\n        int16 healthDelta;     // \\u0418\\u0437\\u043c\\u0435\\u043d\\u0435\\u043d\\u0438\\u0435 \\u0437\\u0434\\u043e\\u0440\\u043e\\u0432\\u044c\\u044f (-1000 to +1000)\\n        uint16 yieldModifier;  // \\u041c\\u043e\\u0434\\u0438\\u0444\\u0438\\u043a\\u0430\\u0442\\u043e\\u0440 \\u0443\\u0440\\u043e\\u0436\\u0430\\u044f (1000 = 100%)\\n        uint32 timestamp;\\n    }\\n\\n    event EffectApplied(\\n        uint256 indexed gardenId,\\n        uint256 indexed roundId,\\n        int16 growthDelta,\\n        int16 healthDelta\\n    );\\n\\n    function applyEffect(\\n        uint256 gardenId,\\n        uint256 roundId,\\n        IFarmEvents.EventData memory eventData\\n    ) external returns (EffectResult memory);\\n}\\n\",\"keccak256\":\"0x2f4ef6742a47f5f0fd3c3b8dac3e09459a37e962fe0c9bd28df021c4e0291e43\",\"license\":\"MIT\"},\"contracts/interfaces/IFarmEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFarmEvents {\\n    enum EventType {\\n        NONE,\\n        LOCUSTS,      // \\u0421\\u0430\\u0440\\u0430\\u043d\\u0447\\u0430 - \\u0443\\u0440\\u043e\\u043d \\u0440\\u0430\\u0441\\u0442\\u0435\\u043d\\u0438\\u044f\\u043c\\n        WIND,         // \\u0412\\u0435\\u0442\\u0435\\u0440 - \\u043c\\u043e\\u0436\\u0435\\u0442 \\u043f\\u043e\\u0432\\u0440\\u0435\\u0434\\u0438\\u0442\\u044c \\u0438\\u043b\\u0438 \\u043f\\u043e\\u043c\\u043e\\u0447\\u044c\\n        RAIN,         // \\u0414\\u043e\\u0436\\u0434\\u044c - \\u0443\\u0441\\u043a\\u043e\\u0440\\u044f\\u0435\\u0442 \\u0440\\u043e\\u0441\\u0442\\n        DROUGHT,      // \\u0417\\u0430\\u0441\\u0443\\u0445\\u0430 - \\u0437\\u0430\\u043c\\u0435\\u0434\\u043b\\u044f\\u0435\\u0442 \\u0440\\u043e\\u0441\\u0442\\n        FROST,        // \\u041c\\u043e\\u0440\\u043e\\u0437 - \\u0443\\u0440\\u043e\\u043d\\n        SUNSTORM,     // \\u0421\\u043e\\u043b\\u043d\\u0435\\u0447\\u043d\\u0430\\u044f \\u0431\\u0443\\u0440\\u044f - \\u0431\\u043e\\u043d\\u0443\\u0441 \\u043a \\u0440\\u043e\\u0441\\u0442\\u0443\\n        PESTS         // \\u0412\\u0440\\u0435\\u0434\\u0438\\u0442\\u0435\\u043b\\u0438 - \\u0443\\u0440\\u043e\\u043d\\n    }\\n\\n    struct EventData {\\n        EventType eventType;\\n        uint16 severity;      // 0-1000 (0.0% - 100.0%)\\n        uint32 timestamp;\\n        bytes32 seed;\\n    }\\n\\n    event EventGenerated(\\n        uint256 indexed gardenId,\\n        uint256 indexed roundId,\\n        EventType eventType,\\n        uint16 severity\\n    );\\n\\n    function generateEvent(\\n        uint256 gardenId,\\n        uint256 roundId,\\n        bytes32 seed\\n    ) external returns (EventData memory);\\n}\\n\",\"keccak256\":\"0x9d48e25693cc65124240cb4eb4931c8fdd0ee92eed154668c8dc50aed5aa12b2\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IFarmEffects.sol\\\";\\n\\ninterface IMarketManager {\\n    struct PriceChange {\\n        uint16 productId;\\n        uint256 newPrice;      // wei per unit\\n        int16 changePercent;   // -1000 to +1000 (-100% to +100%)\\n    }\\n\\n    event PricesUpdated(\\n        uint256 indexed roundId,\\n        uint16[] productIds,\\n        uint256[] newPrices\\n    );\\n\\n    function recalculatePrices(\\n        uint256 roundId,\\n        IFarmEffects.EffectResult memory aggregatedEffect\\n    ) external returns (PriceChange[] memory);\\n\\n    function getPrice(uint16 productId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f25de5e47aa4204ff6026b675d1064852bdac3789d717ec80f08c07a845d4e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001d6e38038062001d6e833981016040819052620000349162000291565b600180556001600160a01b038316620000945760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204661726d4576656e7473206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000ec5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964204661726d456666656374732061646472657373000000000060448201526064016200008b565b6001600160a01b038116620001445760405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964204d61726b65744d616e61676572206164647265737300000060448201526064016200008b565b600680546001600160a01b038086166001600160a01b0319928316179092556007805485841690831617905560088054928416929091169190911790556200018e600033620001c5565b50620001bb7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab33620001c5565b50505050620002db565b6000828152602081815260408083206001600160a01b038516845290915281205460ff166200026a576000838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620002213390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200026e565b5060005b92915050565b80516001600160a01b03811681146200028c57600080fd5b919050565b600080600060608486031215620002a757600080fd5b620002b28462000274565b9250620002c26020850162000274565b9150620002d26040850162000274565b90509250925092565b611a8380620002eb6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806341ed2c12116100c3578063a217fddf1161007c578063a217fddf1461049c578063a2f21b36146104a4578063c0d7e85b146104ad578063d3143615146104c0578063d547741f146104d3578063fc5b75a0146104e657600080fd5b806341ed2c121461033a5780634ca7238e1461034d5780636dca4d44146103c057806372ca1552146103d357806391d14854146103e65780639e18eb39146103f957600080fd5b80632b167b24116101155780632b167b24146102675780632f2ff15d14610292578063364bc15a146102a757806336568abe146102ce5780633b6689bb146102e157806341b76fca1461030457600080fd5b806301ffc9a71461015257806302e79ffe1461017a5780631519c2ac1461020e5780631bd1181014610224578063248a9ca314610244575b600080fd5b61016561016036600461142d565b6104ee565b60405190151581526020015b60405180910390f35b6101d561018836600461145e565b60036020818152600093845260408085209091529183529120805460018201546002830154938301546004840154600590940154929491939192909160ff80821692610100909204169087565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a083015260c082015260e001610171565b610216610525565b604051908152602001610171565b61023761023236600461145e565b610639565b6040516101719190611517565b610216610252366004611559565b60009081526020819052604090206001015490565b60065461027a906001600160a01b031681565b6040516001600160a01b039091168152602001610171565b6102a56102a036600461158e565b61079a565b005b6102167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b6102a56102dc36600461158e565b6107c5565b6102f46102ef36600461145e565b6107fd565b60405161017194939291906115ba565b61016561031236600461145e565b6000918252600360209081526040808420928452919052902060040154610100900460ff1690565b60085461027a906001600160a01b031681565b61036061035b366004611559565b6108dd565b604051610171919081516001600160a01b0316815260208083015161ffff90811691830191909152604080840151821690830152606080840151909116908201526080808301519082015260a09182015115159181019190915260c00190565b6102a56103ce3660046115ea565b6109bf565b6102a56103e136600461162d565b610a52565b6101656103f436600461158e565b61104a565b610458610407366004611559565b60026020819052600091825260409091208054600182015491909201546001600160a01b0383169261ffff600160a01b8204811693600160b01b8304821693600160c01b9093049091169160ff1686565b604080516001600160a01b03909716875261ffff958616602088015293851693860193909352921660608401526080830191909152151560a082015260c001610171565b610216600081565b61021660055481565b6102a56104bb3660046116ad565b611073565b60075461027a906001600160a01b031681565b6102a56104e136600461158e565b61126e565b610216601481565b60006001600160e01b03198216637965db0b60e01b148061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6005805460009182610536836116ef565b9091555050600580546040805160c0810182523380825260208083019586526101f48385019081526103e860608501908152600060808601818152600160a088018181528a8452600296879052898420985189549c51965195516001600160a01b039091166001600160b01b0319909d169c909c17600160a01b61ffff978816021763ffffffff60b01b1916600160b01b9587169590950261ffff60c01b191694909417600160c01b95909b1694909402999099178655975191850191909155519201805460ff19169215159290921790915590519192909183917f6df4441bfdeb82d478c5d9724fde1101963a5c87860dd625924c657fd8d2f6d391a3919050565b6106a460408051610100810190915260006080820181815260a0830182905260c0830182905260e08301919091528190815260408051608081018252600080825260208281018290529282018190526060820152910190815260200160008152602001600081525090565b600083815260046020908152604080832085845290915290819020815161010081019092528054829060808201908390829060ff1660078111156106ea576106ea611480565b60078111156106fb576106fb611480565b8152815461ffff6101008204811660208085019190915263ffffffff630100000090930483166040808601919091526001958601546060958601529587528551608081018752600289015480870b825262010000810490960b81830152640100000000860490921682870152600160301b9094049091168183015291840191909152600384015491830191909152600490920154910152905092915050565b6000828152602081905260409020600101546107b581611293565b6107bf83836112a0565b50505050565b6001600160a01b03811633146107ee5760405163334bd91960e11b815260040160405180910390fd5b6107f88282611332565b505050565b60046020908152600092835260408084209091529082529081902081516080810190925280549091908290829060ff16600781111561083e5761083e611480565b600781111561084f5761084f611480565b8152815461ffff6101008204811660208085019190915263ffffffff630100000090930483166040808601919091526001958601546060958601528051608081018252600289015480880b825262010000810490970b92810192909252640100000000860490921691810191909152600160301b909304169082015260038301546004909301549192909184565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526000828152600260208190526040909120015460ff1661094a5760405162461bcd60e51b815260040161094190611708565b60405180910390fd5b50600090815260026020818152604092839020835160c08101855281546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b8104841695820195909552600160c01b909404909116606084015260018101546080840152015460ff16151560a082015290565b60006109ca81611293565b6001600160a01b038416156109f557600680546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03831615610a2057600780546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038216156107bf57600880546001600160a01b0384166001600160a01b031990911617905550505050565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610a7c81611293565b610a8461139d565b6000858152600260208190526040909120015460ff16610ab65760405162461bcd60e51b815260040161094190611708565b60008581526003602090815260408083208784529091529020600481015460ff16610b195760405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081b9bdd0818dbdb5b5a5d1d1959606a1b6044820152606401610941565b6004810154610100900460ff1615610b6c5760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e48195e1958dd5d195960521b6044820152606401610941565b80600201548484604051610b81929190611737565b604051809103902014610bc75760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995d99585b60921b6044820152606401610941565b60008484610bd6600143611747565b40898942604051602001610bef9695949392919061175a565b60408051808303601f19018152908290528051602090910120600384018190556006546302a5518f60e51b8352600483018a905260248301899052604483018290529092506000916001600160a01b03909116906354aa31e0906064016080604051808303816000875af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061183a565b600754604051633ef7495560e21b81529192506000916001600160a01b039091169063fbdd255490610cc9908c908c90879060040161189b565b6080604051808303816000875af1158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906118d0565b60008a8152600260205260409020815181549293509091610d4791610d429160019190910b90600160b01b900461ffff1661192f565b6113c7565b815461ffff60b01b1916600160b01b61ffff92831602178083556020840151610d8292610d429260019290920b91600160c01b90041661192f565b815461ffff91909116600160c01b0261ffff60c01b19909116178155600181018990556008546040516324a8bc8d60e01b81526000916001600160a01b0316906324a8bc8d90610dd8908d908790600401611957565b6000604051808303816000875af1158015610df7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e1f919081019061196b565b60408051608081018252868152602080820187905283518284015242606083015260008f8152600482528381208f825290915291909120815180518254949550929391929091839190829060ff19166001836007811115610e8257610e82611480565b0217905550602082810151825460408086015166ffffffffffff001990921661010061ffff9485160266ffffffff000000191617630100000063ffffffff9384160217855560609586015160019095019490945586830151805160028801805495830151838801519389015192861663ffffffff199097169690961762010000968616969096029590951769ffffffffffff000000001916640100000000929094169190910269ffffffff000000000000191692909217600160301b929091169190910217905583015160038301559190910151600490910155835160009086906007811115610f7457610f74611480565b602080880151875188830151604051610fc99695940194855260f89390931b6001600160f81b031916602085015260f091821b6001600160f01b0319166021850152811b60238401521b602582015260270190565b60408051601f19818403018152828252805160209182012060048b01805461ff00191661010017905560058b0181905589845290830181905292508c918e917fa9db3eef65e37fc582d4cdbddf125aa1a253d3a1d763df9e39bbd44c8253fb52910160405180910390a35050505050505061104360018055565b5050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab61109d81611293565b6000848152600260208190526040909120015460ff166110cf5760405162461bcd60e51b815260040161094190611708565b600084815260036020908152604080832086845290915290206004015460ff161561113c5760405162461bcd60e51b815260206004820152601760248201527f526f756e6420616c726561647920636f6d6d69747465640000000000000000006044820152606401610941565b8161117d5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e6cacac840d0c2e6d607b1b6044820152606401610941565b6040805160e08101825284815242602080830191825282840186815260006060850181815260016080870181815260a0880184815260c089018581528e865260038089528b87208f8852909852948a90209851895596519188019190915592516002870155519285019290925551600484018054935115156101000261ff00199215159290921661ffff1990941693909317179091555160059091015551839085907f645fd3052738f2dea59a8a6c3cd52ad2efac31b2957556b6fefe470775d0d4f49061126090869033909182526001600160a01b0316602082015260400190565b60405180910390a350505050565b60008281526020819052604090206001015461128981611293565b6107bf8383611332565b61129d81336113f0565b50565b60006112ac838361104a565b61132a576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556112e23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161051f565b50600061051f565b600061133e838361104a565b1561132a576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161051f565b6002600154036113c057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000808212156113d957506000919050565b6103e88213156113ec57506103e8919050565b5090565b6113fa828261104a565b6114295760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610941565b5050565b60006020828403121561143f57600080fd5b81356001600160e01b03198116811461145757600080fd5b9392505050565b6000806040838503121561147157600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b8051600881106114b657634e487b7160e01b600052602160045260246000fd5b825260208181015161ffff169083015260408082015163ffffffff1690830152606090810151910152565b805160010b8252602081015160010b602083015261ffff604082015116604083015263ffffffff60608201511660608301525050565b60006101408201905061152b828451611496565b602083015161153d60808401826114e1565b5060408301516101008301526060909201516101209091015290565b60006020828403121561156b57600080fd5b5035919050565b80356001600160a01b038116811461158957600080fd5b919050565b600080604083850312156115a157600080fd5b823591506115b160208401611572565b90509250929050565b61014081016115c98287611496565b6115d660808301866114e1565b610100820193909352610120015292915050565b6000806000606084860312156115ff57600080fd5b61160884611572565b925061161660208501611572565b915061162460408501611572565b90509250925092565b6000806000806060858703121561164357600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561166957600080fd5b818701915087601f83011261167d57600080fd5b81358181111561168c57600080fd5b88602082850101111561169e57600080fd5b95989497505060200194505050565b6000806000606084860312156116c257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611701576117016116d9565b5060010190565b60208082526015908201527411d85c99195b88191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b8183823760009101908152919050565b8181038181111561051f5761051f6116d9565b85878237909401928352602083019190915260408201526060810191909152608001919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156117ba576117ba611781565b60405290565b6040516060810167ffffffffffffffff811182821017156117ba576117ba611781565b604051601f8201601f1916810167ffffffffffffffff8111828210171561180c5761180c611781565b604052919050565b805161ffff8116811461158957600080fd5b805163ffffffff8116811461158957600080fd5b60006080828403121561184c57600080fd5b611854611797565b82516008811061186357600080fd5b815261187160208401611814565b602082015261188260408401611826565b6040820152606083015160608201528091505092915050565b8381526020810183905260c081016118b66040830184611496565b949350505050565b8051600181900b811461158957600080fd5b6000608082840312156118e257600080fd5b6118ea611797565b6118f3836118be565b8152611901602084016118be565b602082015261191260408401611814565b604082015261192360608401611826565b60608201529392505050565b808201828112600083128015821682158216171561194f5761194f6116d9565b505092915050565b82815260a0810161145760208301846114e1565b6000602080838503121561197e57600080fd5b825167ffffffffffffffff8082111561199657600080fd5b818501915085601f8301126119aa57600080fd5b8151818111156119bc576119bc611781565b6119ca848260051b016117e3565b818152848101925060609182028401850191888311156119e957600080fd5b938501935b82851015611a415780858a031215611a065760008081fd5b611a0e6117c0565b611a1786611814565b815286860151878201526040611a2e8188016118be565b90820152845293840193928501926119ee565b5097965050505050505056fea26469706673582212200200a1033aae02cfb6b863a0f277ef644256f7856b17c47db9661eb470da92fb64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806341ed2c12116100c3578063a217fddf1161007c578063a217fddf1461049c578063a2f21b36146104a4578063c0d7e85b146104ad578063d3143615146104c0578063d547741f146104d3578063fc5b75a0146104e657600080fd5b806341ed2c121461033a5780634ca7238e1461034d5780636dca4d44146103c057806372ca1552146103d357806391d14854146103e65780639e18eb39146103f957600080fd5b80632b167b24116101155780632b167b24146102675780632f2ff15d14610292578063364bc15a146102a757806336568abe146102ce5780633b6689bb146102e157806341b76fca1461030457600080fd5b806301ffc9a71461015257806302e79ffe1461017a5780631519c2ac1461020e5780631bd1181014610224578063248a9ca314610244575b600080fd5b61016561016036600461142d565b6104ee565b60405190151581526020015b60405180910390f35b6101d561018836600461145e565b60036020818152600093845260408085209091529183529120805460018201546002830154938301546004840154600590940154929491939192909160ff80821692610100909204169087565b60408051978852602088019690965294860193909352606085019190915215156080840152151560a083015260c082015260e001610171565b610216610525565b604051908152602001610171565b61023761023236600461145e565b610639565b6040516101719190611517565b610216610252366004611559565b60009081526020819052604090206001015490565b60065461027a906001600160a01b031681565b6040516001600160a01b039091168152602001610171565b6102a56102a036600461158e565b61079a565b005b6102167ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab81565b6102a56102dc36600461158e565b6107c5565b6102f46102ef36600461145e565b6107fd565b60405161017194939291906115ba565b61016561031236600461145e565b6000918252600360209081526040808420928452919052902060040154610100900460ff1690565b60085461027a906001600160a01b031681565b61036061035b366004611559565b6108dd565b604051610171919081516001600160a01b0316815260208083015161ffff90811691830191909152604080840151821690830152606080840151909116908201526080808301519082015260a09182015115159181019190915260c00190565b6102a56103ce3660046115ea565b6109bf565b6102a56103e136600461162d565b610a52565b6101656103f436600461158e565b61104a565b610458610407366004611559565b60026020819052600091825260409091208054600182015491909201546001600160a01b0383169261ffff600160a01b8204811693600160b01b8304821693600160c01b9093049091169160ff1686565b604080516001600160a01b03909716875261ffff958616602088015293851693860193909352921660608401526080830191909152151560a082015260c001610171565b610216600081565b61021660055481565b6102a56104bb3660046116ad565b611073565b60075461027a906001600160a01b031681565b6102a56104e136600461158e565b61126e565b610216601481565b60006001600160e01b03198216637965db0b60e01b148061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6005805460009182610536836116ef565b9091555050600580546040805160c0810182523380825260208083019586526101f48385019081526103e860608501908152600060808601818152600160a088018181528a8452600296879052898420985189549c51965195516001600160a01b039091166001600160b01b0319909d169c909c17600160a01b61ffff978816021763ffffffff60b01b1916600160b01b9587169590950261ffff60c01b191694909417600160c01b95909b1694909402999099178655975191850191909155519201805460ff19169215159290921790915590519192909183917f6df4441bfdeb82d478c5d9724fde1101963a5c87860dd625924c657fd8d2f6d391a3919050565b6106a460408051610100810190915260006080820181815260a0830182905260c0830182905260e08301919091528190815260408051608081018252600080825260208281018290529282018190526060820152910190815260200160008152602001600081525090565b600083815260046020908152604080832085845290915290819020815161010081019092528054829060808201908390829060ff1660078111156106ea576106ea611480565b60078111156106fb576106fb611480565b8152815461ffff6101008204811660208085019190915263ffffffff630100000090930483166040808601919091526001958601546060958601529587528551608081018752600289015480870b825262010000810490960b81830152640100000000860490921682870152600160301b9094049091168183015291840191909152600384015491830191909152600490920154910152905092915050565b6000828152602081905260409020600101546107b581611293565b6107bf83836112a0565b50505050565b6001600160a01b03811633146107ee5760405163334bd91960e11b815260040160405180910390fd5b6107f88282611332565b505050565b60046020908152600092835260408084209091529082529081902081516080810190925280549091908290829060ff16600781111561083e5761083e611480565b600781111561084f5761084f611480565b8152815461ffff6101008204811660208085019190915263ffffffff630100000090930483166040808601919091526001958601546060958601528051608081018252600289015480880b825262010000810490970b92810192909252640100000000860490921691810191909152600160301b909304169082015260038301546004909301549192909184565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526000828152600260208190526040909120015460ff1661094a5760405162461bcd60e51b815260040161094190611708565b60405180910390fd5b50600090815260026020818152604092839020835160c08101855281546001600160a01b038116825261ffff600160a01b8204811694830194909452600160b01b8104841695820195909552600160c01b909404909116606084015260018101546080840152015460ff16151560a082015290565b60006109ca81611293565b6001600160a01b038416156109f557600680546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03831615610a2057600780546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038216156107bf57600880546001600160a01b0384166001600160a01b031990911617905550505050565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab610a7c81611293565b610a8461139d565b6000858152600260208190526040909120015460ff16610ab65760405162461bcd60e51b815260040161094190611708565b60008581526003602090815260408083208784529091529020600481015460ff16610b195760405162461bcd60e51b8152602060048201526013602482015272149bdd5b99081b9bdd0818dbdb5b5a5d1d1959606a1b6044820152606401610941565b6004810154610100900460ff1615610b6c5760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e48195e1958dd5d195960521b6044820152606401610941565b80600201548484604051610b81929190611737565b604051809103902014610bc75760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c995d99585b60921b6044820152606401610941565b60008484610bd6600143611747565b40898942604051602001610bef9695949392919061175a565b60408051808303601f19018152908290528051602090910120600384018190556006546302a5518f60e51b8352600483018a905260248301899052604483018290529092506000916001600160a01b03909116906354aa31e0906064016080604051808303816000875af1158015610c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8f919061183a565b600754604051633ef7495560e21b81529192506000916001600160a01b039091169063fbdd255490610cc9908c908c90879060040161189b565b6080604051808303816000875af1158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906118d0565b60008a8152600260205260409020815181549293509091610d4791610d429160019190910b90600160b01b900461ffff1661192f565b6113c7565b815461ffff60b01b1916600160b01b61ffff92831602178083556020840151610d8292610d429260019290920b91600160c01b90041661192f565b815461ffff91909116600160c01b0261ffff60c01b19909116178155600181018990556008546040516324a8bc8d60e01b81526000916001600160a01b0316906324a8bc8d90610dd8908d908790600401611957565b6000604051808303816000875af1158015610df7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e1f919081019061196b565b60408051608081018252868152602080820187905283518284015242606083015260008f8152600482528381208f825290915291909120815180518254949550929391929091839190829060ff19166001836007811115610e8257610e82611480565b0217905550602082810151825460408086015166ffffffffffff001990921661010061ffff9485160266ffffffff000000191617630100000063ffffffff9384160217855560609586015160019095019490945586830151805160028801805495830151838801519389015192861663ffffffff199097169690961762010000968616969096029590951769ffffffffffff000000001916640100000000929094169190910269ffffffff000000000000191692909217600160301b929091169190910217905583015160038301559190910151600490910155835160009086906007811115610f7457610f74611480565b602080880151875188830151604051610fc99695940194855260f89390931b6001600160f81b031916602085015260f091821b6001600160f01b0319166021850152811b60238401521b602582015260270190565b60408051601f19818403018152828252805160209182012060048b01805461ff00191661010017905560058b0181905589845290830181905292508c918e917fa9db3eef65e37fc582d4cdbddf125aa1a253d3a1d763df9e39bbd44c8253fb52910160405180910390a35050505050505061104360018055565b5050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7ffc8737ab85eb45125971625a9ebdb75cc78e01d5c1fa80c4c6e5203f47bc4fab61109d81611293565b6000848152600260208190526040909120015460ff166110cf5760405162461bcd60e51b815260040161094190611708565b600084815260036020908152604080832086845290915290206004015460ff161561113c5760405162461bcd60e51b815260206004820152601760248201527f526f756e6420616c726561647920636f6d6d69747465640000000000000000006044820152606401610941565b8161117d5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e6cacac840d0c2e6d607b1b6044820152606401610941565b6040805160e08101825284815242602080830191825282840186815260006060850181815260016080870181815260a0880184815260c089018581528e865260038089528b87208f8852909852948a90209851895596519188019190915592516002870155519285019290925551600484018054935115156101000261ff00199215159290921661ffff1990941693909317179091555160059091015551839085907f645fd3052738f2dea59a8a6c3cd52ad2efac31b2957556b6fefe470775d0d4f49061126090869033909182526001600160a01b0316602082015260400190565b60405180910390a350505050565b60008281526020819052604090206001015461128981611293565b6107bf8383611332565b61129d81336113f0565b50565b60006112ac838361104a565b61132a576000838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556112e23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161051f565b50600061051f565b600061133e838361104a565b1561132a576000838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161051f565b6002600154036113c057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000808212156113d957506000919050565b6103e88213156113ec57506103e8919050565b5090565b6113fa828261104a565b6114295760405163e2517d3f60e01b81526001600160a01b038216600482015260248101839052604401610941565b5050565b60006020828403121561143f57600080fd5b81356001600160e01b03198116811461145757600080fd5b9392505050565b6000806040838503121561147157600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b8051600881106114b657634e487b7160e01b600052602160045260246000fd5b825260208181015161ffff169083015260408082015163ffffffff1690830152606090810151910152565b805160010b8252602081015160010b602083015261ffff604082015116604083015263ffffffff60608201511660608301525050565b60006101408201905061152b828451611496565b602083015161153d60808401826114e1565b5060408301516101008301526060909201516101209091015290565b60006020828403121561156b57600080fd5b5035919050565b80356001600160a01b038116811461158957600080fd5b919050565b600080604083850312156115a157600080fd5b823591506115b160208401611572565b90509250929050565b61014081016115c98287611496565b6115d660808301866114e1565b610100820193909352610120015292915050565b6000806000606084860312156115ff57600080fd5b61160884611572565b925061161660208501611572565b915061162460408501611572565b90509250925092565b6000806000806060858703121561164357600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561166957600080fd5b818701915087601f83011261167d57600080fd5b81358181111561168c57600080fd5b88602082850101111561169e57600080fd5b95989497505060200194505050565b6000806000606084860312156116c257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b600060018201611701576117016116d9565b5060010190565b60208082526015908201527411d85c99195b88191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b8183823760009101908152919050565b8181038181111561051f5761051f6116d9565b85878237909401928352602083019190915260408201526060810191909152608001919050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156117ba576117ba611781565b60405290565b6040516060810167ffffffffffffffff811182821017156117ba576117ba611781565b604051601f8201601f1916810167ffffffffffffffff8111828210171561180c5761180c611781565b604052919050565b805161ffff8116811461158957600080fd5b805163ffffffff8116811461158957600080fd5b60006080828403121561184c57600080fd5b611854611797565b82516008811061186357600080fd5b815261187160208401611814565b602082015261188260408401611826565b6040820152606083015160608201528091505092915050565b8381526020810183905260c081016118b66040830184611496565b949350505050565b8051600181900b811461158957600080fd5b6000608082840312156118e257600080fd5b6118ea611797565b6118f3836118be565b8152611901602084016118be565b602082015261191260408401611814565b604082015261192360608401611826565b60608201529392505050565b808201828112600083128015821682158216171561194f5761194f6116d9565b505092915050565b82815260a0810161145760208301846114e1565b6000602080838503121561197e57600080fd5b825167ffffffffffffffff8082111561199657600080fd5b818501915085601f8301126119aa57600080fd5b8151818111156119bc576119bc611781565b6119ca848260051b016117e3565b818152848101925060609182028401850191888311156119e957600080fd5b938501935b82851015611a415780858a031215611a065760008081fd5b611a0e6117c0565b611a1786611814565b815286860151878201526040611a2e8188016118be565b90820152845293840193928501926119ee565b5097965050505050505056fea26469706673582212200200a1033aae02cfb6b863a0f277ef644256f7856b17c47db9661eb470da92fb64736f6c63430008180033",
  "devdoc": {
    "details": "Использует commit-reveal схему для RNG и гарантирует идемпотентность",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "FarmOrchestrator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "commitRound(uint256,uint256,bytes32)": {
        "notice": "Commit фаза: keeper коммитит hash seed'а"
      },
      "createGarden()": {
        "notice": "Создание нового огорода"
      },
      "executeRound(uint256,uint256,bytes)": {
        "notice": "Execute фаза: keeper раскрывает seed и выполняет раунд"
      },
      "getGarden(uint256)": {
        "notice": "Получить текущее состояние огорода"
      },
      "getRoundResult(uint256,uint256)": {
        "notice": "Получить результат раунда"
      },
      "isRoundExecuted(uint256,uint256)": {
        "notice": "Проверить, был ли выполнен раунд"
      },
      "updateContracts(address,address,address)": {
        "notice": "Обновить адреса контрактов (только admin)"
      }
    },
    "notice": "Координирует выполнение раундов: Events -> Effects -> Market",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 2911,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6544,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "gardens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Garden)6513_storage)"
      },
      {
        "astId": 6551,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "roundMetas",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(RoundMeta)6528_storage))"
      },
      {
        "astId": 6558,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "roundResults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(RoundResult)6539_storage))"
      },
      {
        "astId": 6560,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "gardenCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6566,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "farmEvents",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFarmEvents)10080"
      },
      {
        "astId": 6569,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "farmEffects",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IFarmEffects)10035"
      },
      {
        "astId": 6572,
        "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
        "label": "marketManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IMarketManager)10120"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFarmEffects)10035": {
        "encoding": "inplace",
        "label": "contract IFarmEffects",
        "numberOfBytes": "20"
      },
      "t_contract(IFarmEvents)10080": {
        "encoding": "inplace",
        "label": "contract IFarmEvents",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketManager)10120": {
        "encoding": "inplace",
        "label": "contract IMarketManager",
        "numberOfBytes": "20"
      },
      "t_enum(EventType)10046": {
        "encoding": "inplace",
        "label": "enum IFarmEvents.EventType",
        "numberOfBytes": "1"
      },
      "t_int16": {
        "encoding": "inplace",
        "label": "int16",
        "numberOfBytes": "2"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(RoundMeta)6528_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct FarmOrchestrator.RoundMeta))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(RoundMeta)6528_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(RoundResult)6539_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct FarmOrchestrator.RoundResult))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(RoundResult)6539_storage)"
      },
      "t_mapping(t_uint256,t_struct(Garden)6513_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FarmOrchestrator.Garden)",
        "numberOfBytes": "32",
        "value": "t_struct(Garden)6513_storage"
      },
      "t_mapping(t_uint256,t_struct(RoundMeta)6528_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FarmOrchestrator.RoundMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundMeta)6528_storage"
      },
      "t_mapping(t_uint256,t_struct(RoundResult)6539_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FarmOrchestrator.RoundResult)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundResult)6539_storage"
      },
      "t_struct(EffectResult)10011_storage": {
        "encoding": "inplace",
        "label": "struct IFarmEffects.EffectResult",
        "members": [
          {
            "astId": 10004,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "growthDelta",
            "offset": 0,
            "slot": "0",
            "type": "t_int16"
          },
          {
            "astId": 10006,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "healthDelta",
            "offset": 2,
            "slot": "0",
            "type": "t_int16"
          },
          {
            "astId": 10008,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "yieldModifier",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10010,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "timestamp",
            "offset": 6,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(EventData)10056_storage": {
        "encoding": "inplace",
        "label": "struct IFarmEvents.EventData",
        "members": [
          {
            "astId": 10049,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "eventType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(EventType)10046"
          },
          {
            "astId": 10051,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "severity",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10053,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "timestamp",
            "offset": 3,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10055,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "seed",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Garden)6513_storage": {
        "encoding": "inplace",
        "label": "struct FarmOrchestrator.Garden",
        "members": [
          {
            "astId": 6502,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6504,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "plantCount",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6506,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "totalGrowth",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6508,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "totalHealth",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6510,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "lastRoundExecuted",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6512,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoundMeta)6528_storage": {
        "encoding": "inplace",
        "label": "struct FarmOrchestrator.RoundMeta",
        "members": [
          {
            "astId": 6515,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6517,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6519,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "seedHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 6521,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "revealedSeed",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 6523,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "committed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6525,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "executed",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 6527,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "resultHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoundResult)6539_storage": {
        "encoding": "inplace",
        "label": "struct FarmOrchestrator.RoundResult",
        "members": [
          {
            "astId": 6531,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "eventData",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(EventData)10056_storage"
          },
          {
            "astId": 6534,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "effectResult",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(EffectResult)10011_storage"
          },
          {
            "astId": 6536,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "pricesUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6538,
            "contract": "contracts/FarmOrchestrator.sol:FarmOrchestrator",
            "label": "executedAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}