{
  "address": "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameEvents",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gameEffects",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wheatMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "grapeMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pumpkinMultiplier",
          "type": "uint256"
        }
      ],
      "name": "PricesUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_GRAPE_CROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_GRAPE_SEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_PUMPKIN_CROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_PUMPKIN_SEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_WHEAT_CROP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_WHEAT_SEED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.CropType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "cropMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameEffects",
      "outputs": [
        {
          "internalType": "contract GameEffects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameEvents",
      "outputs": [
        {
          "internalType": "contract GameEvents",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wheatSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "grapeSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pumpkinSeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wheatCrop",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "grapeCrop",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pumpkinCrop",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.CropType",
          "name": "cropType",
          "type": "uint8"
        }
      ],
      "name": "getCropPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getPriceHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wheatPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "grapePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pumpkinPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct PriceOracle.PriceSnapshot[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.SeedType",
          "name": "seedType",
          "type": "uint8"
        }
      ],
      "name": "getSeedPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wheatPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "grapePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pumpkinPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum PriceOracle.SeedType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "seedMultipliers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "updatePrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3053d5b1a36b90f5887b6a1164b4947243ae65d795cf19987df288cabdec6674",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
    "transactionIndex": 0,
    "gasUsed": "1086449",
    "logsBloom": "0x
    "blockHash": "0xf254ec5bbddee9dee32abb2ffa85556b5f2f1efe63217b49ac5c8b4293f5061b",
    "transactionHash": "0x3053d5b1a36b90f5887b6a1164b4947243ae65d795cf19987df288cabdec6674",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11761304,
        "transactionHash": "0x3053d5b1a36b90f5887b6a1164b4947243ae65d795cf19987df288cabdec6674",
        "address": "0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf254ec5bbddee9dee32abb2ffa85556b5f2f1efe63217b49ac5c8b4293f5061b"
      }
    ],
    "blockNumber": 11761304,
    "cumulativeGasUsed": "1086449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x4c5859f0F772848b2D91F1D83E2Fe57935348029",
    "0x1291Be112d480055DaFd8a610b7d1e203891C274"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a7c913e832cbcb2622e48effc3e7d82",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gameEffects\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wheatMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grapeMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pumpkinMultiplier\",\"type\":\"uint256\"}],\"name\":\"PricesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_GRAPE_CROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_GRAPE_SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_PUMPKIN_CROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_PUMPKIN_SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_WHEAT_CROP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_WHEAT_SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.CropType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cropMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEffects\",\"outputs\":[{\"internalType\":\"contract GameEffects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEvents\",\"outputs\":[{\"internalType\":\"contract GameEvents\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wheatSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grapeSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pumpkinSeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wheatCrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grapeCrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pumpkinCrop\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.CropType\",\"name\":\"cropType\",\"type\":\"uint8\"}],\"name\":\"getCropPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getPriceHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wheatPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grapePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pumpkinPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct PriceOracle.PriceSnapshot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"seedType\",\"type\":\"uint8\"}],\"name\":\"getSeedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wheatPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grapePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pumpkinPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PriceOracle.SeedType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"seedMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"updatePrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Third contract in the chain reaction\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePrices(uint256)\":{\"details\":\"Called after effects are applied\"}},\"title\":\"PriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllPrices()\":{\"notice\":\"Get all current prices\"},\"getCropPrice(uint8)\":{\"notice\":\"Get current crop sell price\"},\"getPriceHistory(uint256)\":{\"notice\":\"Get price history\"},\"getSeedPrice(uint8)\":{\"notice\":\"Get current seed price\"},\"updatePrices(uint256)\":{\"notice\":\"Update prices based on recent event\"}},\"notice\":\"Dynamic pricing based on events and effects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/FarmLand.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FarmLand\\r\\n * @notice ERC721 NFT representing land plots (8x6 grid = 48 plots)\\r\\n */\\r\\ncontract FarmLand is ERC721, Ownable {\\r\\n    uint256 public constant MAX_PLOTS = 48; // 8x6 grid\\r\\n    uint256 private _nextTokenId;\\r\\n    \\r\\n    struct LandPlot {\\r\\n        uint8 x;           // 0-7\\r\\n        uint8 y;           // 0-5\\r\\n        uint16 fertility;  // 0-1000\\r\\n        uint256 ownedSince;\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => LandPlot) public landPlots;\\r\\n    mapping(address => bool) public authorizedManagers;\\r\\n    \\r\\n    event LandMinted(uint256 indexed tokenId, address indexed owner, uint8 x, uint8 y);\\r\\n    event FertilityChanged(uint256 indexed tokenId, uint16 newFertility);\\r\\n    event ManagerAuthorized(address indexed manager, bool authorized);\\r\\n    \\r\\n    constructor(address initialOwner) \\r\\n        ERC721(\\\"Farm Land\\\", \\\"LAND\\\") \\r\\n        Ownable(initialOwner)\\r\\n    {}\\r\\n    \\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorizedManagers[msg.sender] || msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Authorize a contract to manage land\\r\\n     */\\r\\n    function setAuthorizedManager(address manager, bool authorized) external onlyOwner {\\r\\n        authorizedManagers[manager] = authorized;\\r\\n        emit ManagerAuthorized(manager, authorized);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint a land plot NFT\\r\\n     */\\r\\n    function mint(address to, uint8 x, uint8 y) external onlyAuthorized returns (uint256) {\\r\\n        require(_nextTokenId < MAX_PLOTS, \\\"All plots minted\\\");\\r\\n        require(x < 8 && y < 6, \\\"Invalid coordinates\\\");\\r\\n        \\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        \\r\\n        landPlots[tokenId] = LandPlot({\\r\\n            x: x,\\r\\n            y: y,\\r\\n            fertility: 1000,\\r\\n            ownedSince: block.timestamp\\r\\n        });\\r\\n        \\r\\n        emit LandMinted(tokenId, to, x, y);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update land fertility (affected by events)\\r\\n     */\\r\\n    function updateFertility(uint256 tokenId, uint16 newFertility) external onlyAuthorized {\\r\\n        require(newFertility <= 1000, \\\"Fertility exceeds max\\\");\\r\\n        landPlots[tokenId].fertility = newFertility;\\r\\n        emit FertilityChanged(tokenId, newFertility);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get land plot info\\r\\n     */\\r\\n    function getLandPlot(uint256 tokenId) external view returns (LandPlot memory) {\\r\\n        return landPlots[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get all land plots owned by address\\r\\n     */\\r\\n    function getLandsByOwner(address owner) external view returns (uint256[] memory) {\\r\\n        uint256 balance = balanceOf(owner);\\r\\n        uint256[] memory ownedTokenIds = new uint256[](balance);\\r\\n        \\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint256 i = 0; i < _nextTokenId; i++) {\\r\\n            if (_ownerOf(i) == owner) {\\r\\n                ownedTokenIds[currentIndex] = i;\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return ownedTokenIds;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x55a968d50d9b609619cf1ba66c4cbe47629e7918414e132dccdd9ef987a37d12\",\"license\":\"MIT\"},\"contracts/GameEffects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./GameEvents.sol\\\";\\r\\nimport \\\"./PlantNFT.sol\\\";\\r\\nimport \\\"./FarmLand.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GameEffects\\r\\n * @notice Applies event effects to plants and land\\r\\n * @dev Second contract in the chain reaction (called after GameEvents)\\r\\n */\\r\\ncontract GameEffects is Ownable {\\r\\n    PlantNFT public plantNFT;\\r\\n    FarmLand public farmLand;\\r\\n    GameEvents public gameEvents;\\r\\n    \\r\\n    // Next contract in chain (PriceOracle)\\r\\n    address public priceOracle;\\r\\n    \\r\\n    struct EffectResult {\\r\\n        int16 healthChange;     // -1000 to +1000\\r\\n        int16 fertilityChange;  // -1000 to +1000\\r\\n        uint16 affectedPlants;\\r\\n        uint16 affectedLand;\\r\\n    }\\r\\n    \\r\\n    event EffectsApplied(\\r\\n        uint256 indexed eventId,\\r\\n        int16 avgHealthChange,\\r\\n        int16 avgFertilityChange,\\r\\n        uint16 affectedPlants,\\r\\n        uint16 affectedLand\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        address _plantNFT,\\r\\n        address _farmLand,\\r\\n        address _gameEvents\\r\\n    ) Ownable(initialOwner) {\\r\\n        plantNFT = PlantNFT(_plantNFT);\\r\\n        farmLand = FarmLand(_farmLand);\\r\\n        gameEvents = GameEvents(_gameEvents);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Set price oracle contract\\r\\n     */\\r\\n    function setPriceOracle(address _priceOracle) external onlyOwner {\\r\\n        priceOracle = _priceOracle;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply effects to a player's farm based on event\\r\\n     * @dev Called automatically after event is triggered\\r\\n     */\\r\\n    function applyEffects(\\r\\n        uint256 eventId,\\r\\n        address farmer\\r\\n    ) external returns (EffectResult memory) {\\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        \\r\\n        // Get farmer's land plots\\r\\n        uint256[] memory landTokenIds = farmLand.getLandsByOwner(farmer);\\r\\n        \\r\\n        EffectResult memory result = EffectResult({\\r\\n            healthChange: 0,\\r\\n            fertilityChange: 0,\\r\\n            affectedPlants: 0,\\r\\n            affectedLand: 0\\r\\n        });\\r\\n        \\r\\n        // Apply effects based on event type\\r\\n        (int16 healthMod, int16 fertilityMod) = _calculateModifiers(\\r\\n            gameEvent.eventType,\\r\\n            gameEvent.severity\\r\\n        );\\r\\n        \\r\\n        // Apply to all farmer's land plots\\r\\n        for (uint256 i = 0; i < landTokenIds.length; i++) {\\r\\n            uint256 landId = landTokenIds[i];\\r\\n            FarmLand.LandPlot memory plot = farmLand.getLandPlot(landId);\\r\\n            \\r\\n            // Update land fertility\\r\\n            uint16 newFertility = _applyChange(plot.fertility, fertilityMod);\\r\\n            farmLand.updateFertility(landId, newFertility);\\r\\n            result.affectedLand++;\\r\\n            result.fertilityChange += fertilityMod;\\r\\n        }\\r\\n        \\r\\n        // TODO: Apply to plants on these land plots\\r\\n        // For now, simplified version without tracking plant-land mapping\\r\\n        \\r\\n        emit EffectsApplied(\\r\\n            eventId,\\r\\n            healthMod,\\r\\n            fertilityMod,\\r\\n            result.affectedPlants,\\r\\n            result.affectedLand\\r\\n        );\\r\\n        \\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply effect to a specific plant\\r\\n     */\\r\\n    function applyEffectToPlant(uint256 plantTokenId, uint256 eventId) external {\\r\\n        require(plantNFT.ownerOf(plantTokenId) == msg.sender, \\\"Not plant owner\\\");\\r\\n        \\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        PlantNFT.Plant memory plant = plantNFT.getPlant(plantTokenId);\\r\\n        \\r\\n        (int16 healthMod, ) = _calculateModifiers(\\r\\n            gameEvent.eventType,\\r\\n            gameEvent.severity\\r\\n        );\\r\\n        \\r\\n        // Apply health change\\r\\n        uint16 newHealth = _applyChange(plant.health, healthMod);\\r\\n        plantNFT.updateHealth(plantTokenId, newHealth);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Calculate modifiers based on event type and severity\\r\\n     */\\r\\n    function _calculateModifiers(\\r\\n        GameEvents.EventType eventType,\\r\\n        uint16 severity\\r\\n    ) internal pure returns (int16 healthMod, int16 fertilityMod) {\\r\\n        if (eventType == GameEvents.EventType.NONE) {\\r\\n            return (0, 0);\\r\\n        } else if (eventType == GameEvents.EventType.RAIN) {\\r\\n            // Positive effect\\r\\n            healthMod = int16(uint16(severity / 5));  // +0 to +200\\r\\n            fertilityMod = int16(uint16(severity / 10)); // +0 to +100\\r\\n        } else if (eventType == GameEvents.EventType.SUNSTORM) {\\r\\n            // Very positive\\r\\n            healthMod = int16(uint16(severity / 3));  // +0 to +333\\r\\n            fertilityMod = int16(uint16(severity / 5)); // +0 to +200\\r\\n        } else if (eventType == GameEvents.EventType.LOCUSTS) {\\r\\n            // Heavy damage\\r\\n            healthMod = -int16(uint16(severity / 2));  // -0 to -500\\r\\n            fertilityMod = -int16(uint16(severity / 4)); // -0 to -250\\r\\n        } else if (eventType == GameEvents.EventType.FROST) {\\r\\n            // Very heavy damage\\r\\n            healthMod = -int16(uint16((severity * 7) / 10));  // -0 to -700\\r\\n            fertilityMod = -int16(uint16(severity / 3)); // -0 to -333\\r\\n        } else if (eventType == GameEvents.EventType.DROUGHT) {\\r\\n            // Moderate damage\\r\\n            healthMod = -int16(uint16(severity / 3));  // -0 to -333\\r\\n            fertilityMod = -int16(uint16(severity / 5)); // -0 to -200\\r\\n        } else if (eventType == GameEvents.EventType.WIND) {\\r\\n            // Minor damage\\r\\n            healthMod = -int16(uint16(severity / 5));  // -0 to -200\\r\\n            fertilityMod = -int16(uint16(severity / 10)); // -0 to -100\\r\\n        } else if (eventType == GameEvents.EventType.PESTS) {\\r\\n            // Moderate damage\\r\\n            healthMod = -int16(uint16(severity / 4));  // -0 to -250\\r\\n            fertilityMod = -int16(uint16(severity / 6)); // -0 to -166\\r\\n        }\\r\\n        \\r\\n        return (healthMod, fertilityMod);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply change to a value (0-1000 range)\\r\\n     */\\r\\n    function _applyChange(uint16 current, int16 change) internal pure returns (uint16) {\\r\\n        int32 result = int32(int16(current)) + int32(change);\\r\\n        if (result < 0) return 0;\\r\\n        if (result > 1000) return 1000;\\r\\n        return uint16(uint32(result));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcc321ffd26148a519b2cd81ce66a77165e725e56640a3c1b1a2f8b6e3d0b0131\",\"license\":\"MIT\"},\"contracts/GameEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GameEvents\\r\\n * @notice Generates random farm events (locusts, wind, rain, etc.)\\r\\n * @dev First contract in the chain reaction\\r\\n */\\r\\ncontract GameEvents is Ownable {\\r\\n    enum EventType {\\r\\n        NONE,       // 30% - Nothing happens\\r\\n        LOCUSTS,    // 15% - Damage crops\\r\\n        WIND,       // 10% - Minor damage\\r\\n        RAIN,       // 20% - Good for growth\\r\\n        DROUGHT,    // 10% - Reduces health\\r\\n        FROST,      // 5%  - Heavy damage\\r\\n        SUNSTORM,   // 5%  - Boosts growth\\r\\n        PESTS       // 5%  - Moderate damage\\r\\n    }\\r\\n    \\r\\n    struct GameEvent {\\r\\n        EventType eventType;\\r\\n        uint16 severity;      // 0-1000\\r\\n        uint256 timestamp;\\r\\n        uint256 blockNumber;\\r\\n    }\\r\\n    \\r\\n    // Store event history\\r\\n    GameEvent[] public eventHistory;\\r\\n    \\r\\n    // Next contract in chain (FarmEffects)\\r\\n    address public effectsContract;\\r\\n    \\r\\n    event EventTriggered(\\r\\n        uint256 indexed eventId,\\r\\n        EventType eventType,\\r\\n        uint16 severity,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    \\r\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\r\\n    \\r\\n    /**\\r\\n     * @notice Set the effects contract address\\r\\n     */\\r\\n    function setEffectsContract(address _effectsContract) external onlyOwner {\\r\\n        effectsContract = _effectsContract;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Generate a random event (called by keeper or player action)\\r\\n     */\\r\\n    function triggerEvent() external returns (uint256 eventId) {\\r\\n        // Generate pseudo-random number\\r\\n        uint256 random = uint256(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    block.timestamp,\\r\\n                    block.prevrandao,\\r\\n                    msg.sender,\\r\\n                    eventHistory.length\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        \\r\\n        // Select event type based on probability\\r\\n        EventType eventType = _selectEventType(random % 100);\\r\\n        \\r\\n        // Calculate severity (0-1000)\\r\\n        uint16 severity = uint16((random >> 8) % 1001);\\r\\n        \\r\\n        // Store event\\r\\n        GameEvent memory newEvent = GameEvent({\\r\\n            eventType: eventType,\\r\\n            severity: severity,\\r\\n            timestamp: block.timestamp,\\r\\n            blockNumber: block.number\\r\\n        });\\r\\n        \\r\\n        eventHistory.push(newEvent);\\r\\n        eventId = eventHistory.length - 1;\\r\\n        \\r\\n        emit EventTriggered(eventId, eventType, severity, block.timestamp);\\r\\n        \\r\\n        return eventId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Select event type based on weighted probability\\r\\n     */\\r\\n    function _selectEventType(uint256 rand) internal pure returns (EventType) {\\r\\n        if (rand < 30) return EventType.NONE;        // 30%\\r\\n        if (rand < 50) return EventType.RAIN;        // 20%\\r\\n        if (rand < 65) return EventType.LOCUSTS;     // 15%\\r\\n        if (rand < 75) return EventType.WIND;        // 10%\\r\\n        if (rand < 85) return EventType.DROUGHT;     // 10%\\r\\n        if (rand < 90) return EventType.SUNSTORM;    // 5%\\r\\n        if (rand < 95) return EventType.FROST;       // 5%\\r\\n        return EventType.PESTS;                      // 5%\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get event by ID\\r\\n     */\\r\\n    function getEvent(uint256 eventId) external view returns (GameEvent memory) {\\r\\n        require(eventId < eventHistory.length, \\\"Event does not exist\\\");\\r\\n        return eventHistory[eventId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get total events count\\r\\n     */\\r\\n    function getEventsCount() external view returns (uint256) {\\r\\n        return eventHistory.length;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get recent events\\r\\n     */\\r\\n    function getRecentEvents(uint256 count) external view returns (GameEvent[] memory) {\\r\\n        uint256 total = eventHistory.length;\\r\\n        if (count > total) count = total;\\r\\n        \\r\\n        GameEvent[] memory recent = new GameEvent[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            recent[i] = eventHistory[total - count + i];\\r\\n        }\\r\\n        \\r\\n        return recent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6248c77448eb8c8bcc42f022ba425eea3db47ea4da0269e89247dafc3c61d126\",\"license\":\"MIT\"},\"contracts/PlantNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PlantNFT\\r\\n * @notice ERC721 NFT representing planted crops\\r\\n * @dev Each plant has type, growth stage, health, and planted timestamp\\r\\n */\\r\\ncontract PlantNFT is ERC721, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    \\r\\n    enum PlantType { WHEAT, GRAPE, PUMPKIN }\\r\\n    \\r\\n    struct Plant {\\r\\n        PlantType plantType;\\r\\n        uint8 growthStage;      // 0-3 (seed -> mature)\\r\\n        uint16 health;          // 0-1000\\r\\n        uint256 plantedAt;      // timestamp\\r\\n        uint256 landTokenId;    // which land plot it's on\\r\\n    }\\r\\n    \\r\\n    mapping(uint256 => Plant) public plants;\\r\\n    mapping(address => bool) public authorizedManagers;\\r\\n    \\r\\n    event PlantCreated(uint256 indexed tokenId, address indexed owner, PlantType plantType, uint256 landTokenId);\\r\\n    event PlantGrown(uint256 indexed tokenId, uint8 newStage);\\r\\n    event PlantHealthChanged(uint256 indexed tokenId, uint16 newHealth);\\r\\n    event ManagerAuthorized(address indexed manager, bool authorized);\\r\\n    \\r\\n    constructor(address initialOwner) \\r\\n        ERC721(\\\"Farm Plant\\\", \\\"PLANT\\\") \\r\\n        Ownable(initialOwner)\\r\\n    {}\\r\\n    \\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorizedManagers[msg.sender] || msg.sender == owner(), \\\"Not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Authorize a contract to manage plants\\r\\n     */\\r\\n    function setAuthorizedManager(address manager, bool authorized) external onlyOwner {\\r\\n        authorizedManagers[manager] = authorized;\\r\\n        emit ManagerAuthorized(manager, authorized);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Mint a new plant NFT\\r\\n     */\\r\\n    function mint(\\r\\n        address to,\\r\\n        PlantType plantType,\\r\\n        uint256 landTokenId\\r\\n    ) external onlyAuthorized returns (uint256) {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        \\r\\n        plants[tokenId] = Plant({\\r\\n            plantType: plantType,\\r\\n            growthStage: 0,\\r\\n            health: 1000,\\r\\n            plantedAt: block.timestamp,\\r\\n            landTokenId: landTokenId\\r\\n        });\\r\\n        \\r\\n        emit PlantCreated(tokenId, to, plantType, landTokenId);\\r\\n        return tokenId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update plant growth stage\\r\\n     */\\r\\n    function updateGrowthStage(uint256 tokenId, uint8 newStage) external onlyAuthorized {\\r\\n        require(newStage <= 3, \\\"Invalid growth stage\\\");\\r\\n        plants[tokenId].growthStage = newStage;\\r\\n        emit PlantGrown(tokenId, newStage);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update plant health (called by FarmEffects contract)\\r\\n     */\\r\\n    function updateHealth(uint256 tokenId, uint16 newHealth) external onlyAuthorized {\\r\\n        require(newHealth <= 1000, \\\"Health exceeds max\\\");\\r\\n        plants[tokenId].health = newHealth;\\r\\n        emit PlantHealthChanged(tokenId, newHealth);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Burn plant NFT (when harvested)\\r\\n     */\\r\\n    function burn(uint256 tokenId) external onlyAuthorized {\\r\\n        _burn(tokenId);\\r\\n        delete plants[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get plant info\\r\\n     */\\r\\n    function getPlant(uint256 tokenId) external view returns (Plant memory) {\\r\\n        return plants[tokenId];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Check if plant is ready to harvest\\r\\n     */\\r\\n    function isReadyToHarvest(uint256 tokenId) external view returns (bool) {\\r\\n        Plant memory plant = plants[tokenId];\\r\\n        \\r\\n        // Growth time in seconds\\r\\n        uint256 requiredTime;\\r\\n        if (plant.plantType == PlantType.WHEAT) {\\r\\n            requiredTime = 15; // 15 seconds for demo\\r\\n        } else if (plant.plantType == PlantType.GRAPE) {\\r\\n            requiredTime = 25;\\r\\n        } else {\\r\\n            requiredTime = 35;\\r\\n        }\\r\\n        \\r\\n        return (block.timestamp >= plant.plantedAt + requiredTime) && \\r\\n               (plant.growthStage >= 3) &&\\r\\n               (plant.health > 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35779688e4c48210f3094815003017357305f9f59898b704baa8b8d6c06c8b66\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./GameEvents.sol\\\";\\r\\nimport \\\"./GameEffects.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PriceOracle\\r\\n * @notice Dynamic pricing based on events and effects\\r\\n * @dev Third contract in the chain reaction\\r\\n */\\r\\ncontract PriceOracle is Ownable {\\r\\n    GameEvents public gameEvents;\\r\\n    GameEffects public gameEffects;\\r\\n    \\r\\n    enum CropType { WHEAT, GRAPE, PUMPKIN }\\r\\n    enum SeedType { WHEAT_SEED, GRAPE_SEED, PUMPKIN_SEED }\\r\\n    \\r\\n    // Base prices in wei (for demo, small values)\\r\\n    uint256 public constant BASE_WHEAT_SEED = 0.005 ether;\\r\\n    uint256 public constant BASE_GRAPE_SEED = 0.012 ether;\\r\\n    uint256 public constant BASE_PUMPKIN_SEED = 0.020 ether;\\r\\n    \\r\\n    uint256 public constant BASE_WHEAT_CROP = 0.010 ether;\\r\\n    uint256 public constant BASE_GRAPE_CROP = 0.025 ether;\\r\\n    uint256 public constant BASE_PUMPKIN_CROP = 0.045 ether;\\r\\n    \\r\\n    // Current price multipliers (1000 = 1.0x, 1500 = 1.5x)\\r\\n    mapping(CropType => uint256) public cropMultipliers;\\r\\n    mapping(SeedType => uint256) public seedMultipliers;\\r\\n    \\r\\n    // Price history\\r\\n    struct PriceSnapshot {\\r\\n        uint256 timestamp;\\r\\n        uint256 wheatPrice;\\r\\n        uint256 grapePrice;\\r\\n        uint256 pumpkinPrice;\\r\\n    }\\r\\n    \\r\\n    PriceSnapshot[] public priceHistory;\\r\\n    \\r\\n    event PricesUpdated(\\r\\n        uint256 indexed eventId,\\r\\n        uint256 wheatMultiplier,\\r\\n        uint256 grapeMultiplier,\\r\\n        uint256 pumpkinMultiplier\\r\\n    );\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        address _gameEvents,\\r\\n        address _gameEffects\\r\\n    ) Ownable(initialOwner) {\\r\\n        gameEvents = GameEvents(_gameEvents);\\r\\n        gameEffects = GameEffects(_gameEffects);\\r\\n        \\r\\n        // Initialize at 1.0x\\r\\n        cropMultipliers[CropType.WHEAT] = 1000;\\r\\n        cropMultipliers[CropType.GRAPE] = 1000;\\r\\n        cropMultipliers[CropType.PUMPKIN] = 1000;\\r\\n        \\r\\n        seedMultipliers[SeedType.WHEAT_SEED] = 1000;\\r\\n        seedMultipliers[SeedType.GRAPE_SEED] = 1000;\\r\\n        seedMultipliers[SeedType.PUMPKIN_SEED] = 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Update prices based on recent event\\r\\n     * @dev Called after effects are applied\\r\\n     */\\r\\n    function updatePrices(uint256 eventId) external {\\r\\n        GameEvents.GameEvent memory gameEvent = gameEvents.getEvent(eventId);\\r\\n        \\r\\n        // Calculate price changes based on event type\\r\\n        (int16 wheatChange, int16 grapeChange, int16 pumpkinChange) = \\r\\n            _calculatePriceChanges(gameEvent.eventType, gameEvent.severity);\\r\\n        \\r\\n        // Apply changes to multipliers\\r\\n        cropMultipliers[CropType.WHEAT] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.WHEAT],\\r\\n            wheatChange\\r\\n        );\\r\\n        cropMultipliers[CropType.GRAPE] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.GRAPE],\\r\\n            grapeChange\\r\\n        );\\r\\n        cropMultipliers[CropType.PUMPKIN] = _applyMultiplierChange(\\r\\n            cropMultipliers[CropType.PUMPKIN],\\r\\n            pumpkinChange\\r\\n        );\\r\\n        \\r\\n        // Seeds follow crop prices (inverse relationship)\\r\\n        seedMultipliers[SeedType.WHEAT_SEED] = cropMultipliers[CropType.WHEAT];\\r\\n        seedMultipliers[SeedType.GRAPE_SEED] = cropMultipliers[CropType.GRAPE];\\r\\n        seedMultipliers[SeedType.PUMPKIN_SEED] = cropMultipliers[CropType.PUMPKIN];\\r\\n        \\r\\n        // Store price snapshot\\r\\n        priceHistory.push(PriceSnapshot({\\r\\n            timestamp: block.timestamp,\\r\\n            wheatPrice: getCropPrice(CropType.WHEAT),\\r\\n            grapePrice: getCropPrice(CropType.GRAPE),\\r\\n            pumpkinPrice: getCropPrice(CropType.PUMPKIN)\\r\\n        }));\\r\\n        \\r\\n        emit PricesUpdated(\\r\\n            eventId,\\r\\n            cropMultipliers[CropType.WHEAT],\\r\\n            cropMultipliers[CropType.GRAPE],\\r\\n            cropMultipliers[CropType.PUMPKIN]\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Calculate price changes based on event\\r\\n     * @dev Bad events increase prices (scarcity), good events decrease prices (abundance)\\r\\n     */\\r\\n    function _calculatePriceChanges(\\r\\n        GameEvents.EventType eventType,\\r\\n        uint16 severity\\r\\n    ) internal pure returns (int16 wheat, int16 grape, int16 pumpkin) {\\r\\n        if (eventType == GameEvents.EventType.NONE) {\\r\\n            // Prices slowly normalize\\r\\n            return (-5, -5, -5);\\r\\n        } else if (eventType == GameEvents.EventType.RAIN) {\\r\\n            // Good harvest -> lower prices\\r\\n            wheat = -int16(uint16(severity / 20));  // -0 to -50\\r\\n            grape = -int16(uint16(severity / 25));\\r\\n            pumpkin = -int16(uint16(severity / 30));\\r\\n        } else if (eventType == GameEvents.EventType.SUNSTORM) {\\r\\n            // Excellent harvest -> much lower prices\\r\\n            wheat = -int16(uint16(severity / 10));  // -0 to -100\\r\\n            grape = -int16(uint16(severity / 15));\\r\\n            pumpkin = -int16(uint16(severity / 20));\\r\\n        } else if (eventType == GameEvents.EventType.LOCUSTS) {\\r\\n            // Crop damage -> higher prices\\r\\n            wheat = int16(uint16(severity / 5));    // +0 to +200\\r\\n            grape = int16(uint16(severity / 7));\\r\\n            pumpkin = int16(uint16(severity / 10));\\r\\n        } else if (eventType == GameEvents.EventType.FROST) {\\r\\n            // Heavy damage -> much higher prices\\r\\n            wheat = int16(uint16(severity / 3));    // +0 to +333\\r\\n            grape = int16(uint16(severity / 4));\\r\\n            pumpkin = int16(uint16(severity / 5));\\r\\n        } else if (eventType == GameEvents.EventType.DROUGHT) {\\r\\n            // Moderate damage -> moderate price increase\\r\\n            wheat = int16(uint16(severity / 6));    // +0 to +166\\r\\n            grape = int16(uint16(severity / 8));\\r\\n            pumpkin = int16(uint16(severity / 10));\\r\\n        } else if (eventType == GameEvents.EventType.WIND || eventType == GameEvents.EventType.PESTS) {\\r\\n            // Minor damage -> slight price increase\\r\\n            wheat = int16(uint16(severity / 15));   // +0 to +66\\r\\n            grape = int16(uint16(severity / 20));\\r\\n            pumpkin = int16(uint16(severity / 25));\\r\\n        }\\r\\n        \\r\\n        return (wheat, grape, pumpkin);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Apply multiplier change (clamped between 0.5x and 2.0x)\\r\\n     */\\r\\n    function _applyMultiplierChange(uint256 current, int16 change) internal pure returns (uint256) {\\r\\n        int32 result = int32(int256(current)) + int32(change);\\r\\n        if (result < 500) return 500;    // Min 0.5x\\r\\n        if (result > 2000) return 2000;  // Max 2.0x\\r\\n        return uint256(uint32(result));\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get current seed price\\r\\n     */\\r\\n    function getSeedPrice(SeedType seedType) public view returns (uint256) {\\r\\n        uint256 basePrice;\\r\\n        if (seedType == SeedType.WHEAT_SEED) basePrice = BASE_WHEAT_SEED;\\r\\n        else if (seedType == SeedType.GRAPE_SEED) basePrice = BASE_GRAPE_SEED;\\r\\n        else basePrice = BASE_PUMPKIN_SEED;\\r\\n        \\r\\n        return (basePrice * seedMultipliers[seedType]) / 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get current crop sell price\\r\\n     */\\r\\n    function getCropPrice(CropType cropType) public view returns (uint256) {\\r\\n        uint256 basePrice;\\r\\n        if (cropType == CropType.WHEAT) basePrice = BASE_WHEAT_CROP;\\r\\n        else if (cropType == CropType.GRAPE) basePrice = BASE_GRAPE_CROP;\\r\\n        else basePrice = BASE_PUMPKIN_CROP;\\r\\n        \\r\\n        return (basePrice * cropMultipliers[cropType]) / 1000;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get all current prices\\r\\n     */\\r\\n    function getAllPrices() external view returns (\\r\\n        uint256 wheatSeed,\\r\\n        uint256 grapeSeed,\\r\\n        uint256 pumpkinSeed,\\r\\n        uint256 wheatCrop,\\r\\n        uint256 grapeCrop,\\r\\n        uint256 pumpkinCrop\\r\\n    ) {\\r\\n        return (\\r\\n            getSeedPrice(SeedType.WHEAT_SEED),\\r\\n            getSeedPrice(SeedType.GRAPE_SEED),\\r\\n            getSeedPrice(SeedType.PUMPKIN_SEED),\\r\\n            getCropPrice(CropType.WHEAT),\\r\\n            getCropPrice(CropType.GRAPE),\\r\\n            getCropPrice(CropType.PUMPKIN)\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Get price history\\r\\n     */\\r\\n    function getPriceHistory(uint256 count) external view returns (PriceSnapshot[] memory) {\\r\\n        uint256 total = priceHistory.length;\\r\\n        if (count > total) count = total;\\r\\n        \\r\\n        PriceSnapshot[] memory recent = new PriceSnapshot[](count);\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            recent[i] = priceHistory[total - count + i];\\r\\n        }\\r\\n        \\r\\n        return recent;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x79e202979c8f76d348c8c80ba9fe6deb67086985df28243f57b1d49004134863\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063ae7e8d81116100ad578063e97eb13311610071578063e97eb13314610293578063eea138e1146102a1578063ef7786fe146102b4578063f2fde38b146102c7578063fd1a98a5146102da57600080fd5b8063ae7e8d811461021e578063b27a048414610231578063c7cc481214610264578063cc098bf614610272578063db2597821461028557600080fd5b8063715018a6116100f4578063715018a6146101b55780637d1c98ce146101bf5780638da5cb5b146101df578063984d9181146101f05780639d3468821461021057600080fd5b806329dfcda1146101265780632bd696fd14610147578063445df9d6146101555780636f8c0a2a1461018a575b600080fd5b610134662386f26fc1000081565b6040519081526020015b60405180910390f35b610134662aa1efb94e000081565b61015d6102fa565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161013e565b60025461019d906001600160a01b031681565b6040516001600160a01b03909116815260200161013e565b6101bd610352565b005b6101346101cd366004610bf2565b60036020526000908152604090205481565b6000546001600160a01b031661019d565b6101346101fe366004610bf2565b60046020526000908152604090205481565b6101346611c37937e0800081565b6101bd61022c366004610c0f565b610366565b61024461023f366004610c0f565b61065e565b60408051948552602085019390935291830152606082015260800161013e565b61013466470de4df82000081565b610134610280366004610bf2565b610698565b6101346658d15e1762800081565b610134669fdf42f6e4800081565b6101346102af366004610bf2565b610747565b60015461019d906001600160a01b031681565b6101bd6102d5366004610c28565b6107ba565b6102ed6102e8366004610c0f565b6107fd565b60405161013e9190610c51565b60008060008060008061030d6000610698565b6103176001610698565b6103216002610698565b61032b6000610747565b6103356001610747565b61033f6002610747565b949b939a50919850965094509092509050565b61035a610929565b6103646000610956565b565b600154604051630368c42760e51b8152600481018390526000916001600160a01b031690636d1884e090602401608060405180830381865afa1580156103b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d49190610ccb565b905060008060006103ed846000015185602001516109a6565b600080526003602052600080516020610e8c8339815191525492955090935091506104189084610b93565b6003602052600080516020610e8c833981519152556001600052600080516020610e6c8339815191525461044c9083610b93565b6003602052600080516020610e6c8339815191525560026000527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d546104929082610b93565b7fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d819055600080516020610e8c833981519152547f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec55600080516020610e6c833981519152547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe055560026000908152600460209081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a792909255604080516080810190915242815260059290919082019061056d90610747565b815260200161057c6001610747565b815260200161058b6002610747565b90528154600180820184556000938452602080852084516004909402019283558381015191830191909155604080840151600280850191909155606094850151600394850155928252600080516020610e8c83398151915254600080516020610e6c83398151915254939095527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d548151958652918501929092529083015286917f6ef2ff813efc9efc76792366c4aca2677b755a5a13affc54d96ef35dc8e9bb73910160405180910390a25050505050565b6005818154811061066e57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b600080808360028111156106ae576106ae610d59565b036106c157506611c37937e080006106f2565b60018360028111156106d5576106d5610d59565b036106e85750662aa1efb94e00006106f2565b5066470de4df8200005b6103e86004600085600281111561070b5761070b610d59565b600281111561071c5761071c610d59565b815260200190815260200160002054826107369190610d85565b6107409190610db2565b9392505050565b6000808083600281111561075d5761075d610d59565b036107705750662386f26fc100006107a1565b600183600281111561078457610784610d59565b0361079757506658d15e176280006107a1565b50669fdf42f6e480005b6103e86003600085600281111561070b5761070b610d59565b6107c2610929565b6001600160a01b0381166107f157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107fa81610956565b50565b6005546060908083111561080f578092505b60008367ffffffffffffffff81111561082a5761082a610cb5565b60405190808252806020026020018201604052801561088657816020015b6108736040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108485790505b50905060005b84811015610921576005816108a18786610dc6565b6108ab9190610dd9565b815481106108bb576108bb610dec565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505082828151811061090e5761090e610dec565b602090810291909101015260010161088c565b509392505050565b6000546001600160a01b031633146103645760405163118cdaa760e01b81523360048201526024016107e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008080808560078111156109bd576109bd610d59565b036109d15750600419915081905080610b8c565b60038560078111156109e5576109e5610d59565b03610a31576109f5601485610e02565b6109fe90610e23565b9250610a0b601985610e02565b610a1490610e23565b9150610a21601e85610e02565b610a2a90610e23565b9050610b8c565b6006856007811115610a4557610a45610d59565b03610a8157610a55600a85610e02565b610a5e90610e23565b9250610a6b600f85610e02565b610a7490610e23565b9150610a21601485610e02565b6001856007811115610a9557610a95610d59565b03610abf57610aa5600585610e02565b9250610ab2600785610e02565b9150610a2a600a85610e02565b6005856007811115610ad357610ad3610d59565b03610afd57610ae3600385610e02565b9250610af0600485610e02565b9150610a2a600585610e02565b6004856007811115610b1157610b11610d59565b03610b2e57610b21600685610e02565b9250610ab2600885610e02565b6002856007811115610b4257610b42610d59565b1480610b5f57506007856007811115610b5d57610b5d610d59565b145b15610b8c57610b6f600f85610e02565b9250610b7c601485610e02565b9150610b89601985610e02565b90505b9250925092565b600080610ba4600184900b85610e44565b90506101f48160030b1215610bbe576101f4915050610bdf565b6107d08160030b1315610bd6576107d0915050610bdf565b63ffffffff1690505b92915050565b600381106107fa57600080fd5b600060208284031215610c0457600080fd5b813561074081610be5565b600060208284031215610c2157600080fd5b5035919050565b600060208284031215610c3a57600080fd5b81356001600160a01b038116811461074057600080fd5b602080825282518282018190526000919060409081850190868401855b82811015610ca857815180518552868101518786015285810151868601526060908101519085015260809093019290850190600101610c6e565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600060808284031215610cdd57600080fd5b6040516080810181811067ffffffffffffffff82111715610d0e57634e487b7160e01b600052604160045260246000fd5b604052825160088110610d2057600080fd5b8152602083015161ffff81168114610d3757600080fd5b6020820152604083810151908201526060928301519281019290925250919050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610bdf57610bdf610d6f565b634e487b7160e01b600052601260045260246000fd5b600082610dc157610dc1610d9c565b500490565b81810381811115610bdf57610bdf610d6f565b80820180821115610bdf57610bdf610d6f565b634e487b7160e01b600052603260045260246000fd5b600061ffff80841680610e1757610e17610d9c565b92169190910492915050565b60008160010b617fff198103610e3b57610e3b610d6f565b60000392915050565b600381810b9083900b01637fffffff8113637fffffff1982121715610bdf57610bdf610d6f56fea15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92effa264697066735822122041be879a7c220e57e7521db86b36a9297ceb1a07fa36f5efa4562b36dad4a27d64736f6c63430008180033",
  "devdoc": {
    "details": "Third contract in the chain reaction",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePrices(uint256)": {
        "details": "Called after effects are applied"
      }
    },
    "title": "PriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllPrices()": {
        "notice": "Get all current prices"
      },
      "getCropPrice(uint8)": {
        "notice": "Get current crop sell price"
      },
      "getPriceHistory(uint256)": {
        "notice": "Get price history"
      },
      "getSeedPrice(uint8)": {
        "notice": "Get current seed price"
      },
      "updatePrices(uint256)": {
        "notice": "Update prices based on recent event"
      }
    },
    "notice": "Dynamic pricing based on events and effects",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5833,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "gameEvents",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GameEvents)5496"
      },
      {
        "astId": 5836,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "gameEffects",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GameEffects)5193"
      },
      {
        "astId": 5867,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "cropMultipliers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(CropType)5840,t_uint256)"
      },
      {
        "astId": 5872,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "seedMultipliers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(SeedType)5844,t_uint256)"
      },
      {
        "astId": 5885,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "priceHistory",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(PriceSnapshot)5881_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PriceSnapshot)5881_storage)dyn_storage": {
        "base": "t_struct(PriceSnapshot)5881_storage",
        "encoding": "dynamic_array",
        "label": "struct PriceOracle.PriceSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_contract(GameEffects)5193": {
        "encoding": "inplace",
        "label": "contract GameEffects",
        "numberOfBytes": "20"
      },
      "t_contract(GameEvents)5496": {
        "encoding": "inplace",
        "label": "contract GameEvents",
        "numberOfBytes": "20"
      },
      "t_enum(CropType)5840": {
        "encoding": "inplace",
        "label": "enum PriceOracle.CropType",
        "numberOfBytes": "1"
      },
      "t_enum(SeedType)5844": {
        "encoding": "inplace",
        "label": "enum PriceOracle.SeedType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(CropType)5840,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(CropType)5840",
        "label": "mapping(enum PriceOracle.CropType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(SeedType)5844,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(SeedType)5844",
        "label": "mapping(enum PriceOracle.SeedType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PriceSnapshot)5881_storage": {
        "encoding": "inplace",
        "label": "struct PriceOracle.PriceSnapshot",
        "members": [
          {
            "astId": 5874,
            "contract": "contracts/PriceOracle.sol:PriceOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5876,
            "contract": "contracts/PriceOracle.sol:PriceOracle",
            "label": "wheatPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5878,
            "contract": "contracts/PriceOracle.sol:PriceOracle",
            "label": "grapePrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5880,
            "contract": "contracts/PriceOracle.sol:PriceOracle",
            "label": "pumpkinPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}