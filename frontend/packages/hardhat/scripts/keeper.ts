/**
 * Farm Game Keeper Script
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—É–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥–æ—Ä–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç commit-reveal —Å—Ö–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */

import { ethers } from "hardhat";
import { FarmOrchestrator } from "../typechain-types";

const ROUND_INTERVAL = 20; // —Å–µ–∫—É–Ω–¥—ã
const MAX_GARDENS = 100; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

async function main() {
  console.log("üåæ Starting Farm Game Keeper...\n");

  // –ü–æ–ª—É—á–∞–µ–º deployer –∞–∫–∫–∞—É–Ω—Ç (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å KEEPER_ROLE)
  const [keeper] = await ethers.getSigners();
  console.log(`Keeper address: ${keeper.address}\n`);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ deployed –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
  // –í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  const orchestratorAddress = process.env.FARM_ORCHESTRATOR_ADDRESS || "";
  
  if (!orchestratorAddress) {
    console.error("‚ùå Error: FARM_ORCHESTRATOR_ADDRESS not set in environment");
    console.log("Please set it in .env file or run with:");
    console.log("FARM_ORCHESTRATOR_ADDRESS=0x... yarn keeper");
    process.exit(1);
  }

  const farmOrchestrator = await ethers.getContractAt(
    "FarmOrchestrator",
    orchestratorAddress
  ) as FarmOrchestrator;

  console.log(`Connected to FarmOrchestrator at: ${orchestratorAddress}\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
  const KEEPER_ROLE = await farmOrchestrator.KEEPER_ROLE();
  const hasRole = await farmOrchestrator.hasRole(KEEPER_ROLE, keeper.address);
  
  if (!hasRole) {
    console.error("‚ùå Error: Current account does not have KEEPER_ROLE");
    process.exit(1);
  }

  console.log("‚úÖ Keeper role verified\n");
  console.log(`‚è∞ Round interval: ${ROUND_INTERVAL} seconds\n`);
  console.log("Starting keeper loop... Press Ctrl+C to stop\n");

  // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
  let roundCounter = 0;
  
  while (true) {
    try {
      roundCounter++;
      const timestamp = Math.floor(Date.now() / 1000);
      const roundId = timestamp;

      console.log(`\nüîÑ Round ${roundCounter} (ID: ${roundId}) - ${new Date().toLocaleTimeString()}`);
      console.log("‚ïê".repeat(60));

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ—Ä–æ–¥–æ–≤
      const gardenCount = await farmOrchestrator.gardenCounter();
      console.log(`üìä Total gardens: ${gardenCount}`);

      if (gardenCount === 0n) {
        console.log("‚ö†Ô∏è  No gardens to process yet");
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ–≥–æ—Ä–æ–¥
        const gardensToProcess = Math.min(Number(gardenCount), MAX_GARDENS);
        
        for (let i = 1; i <= gardensToProcess; i++) {
          try {
            await processGarden(farmOrchestrator, i, roundId);
          } catch (error: any) {
            console.error(`‚ùå Error processing garden ${i}:`, error.message);
          }
        }
      }

      console.log("\n‚úÖ Round completed");
      console.log(`‚è≥ Waiting ${ROUND_INTERVAL} seconds until next round...\n`);

      // –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
      await sleep(ROUND_INTERVAL * 1000);

    } catch (error: any) {
      console.error("\n‚ùå Keeper error:", error.message);
      console.log("Retrying in 5 seconds...\n");
      await sleep(5000);
    }
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –æ–≥–æ—Ä–æ–¥: commit -> reveal -> execute
 */
async function processGarden(
  orchestrator: FarmOrchestrator,
  gardenId: number,
  roundId: number
) {
  console.log(`\n  üå± Processing Garden #${gardenId}...`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–≥–æ—Ä–æ–¥
    const garden = await orchestrator.getGarden(gardenId);
    if (!garden.exists) {
      console.log(`  ‚ö†Ô∏è  Garden #${gardenId} does not exist`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥
    const isExecuted = await orchestrator.isRoundExecuted(gardenId, roundId);
    if (isExecuted) {
      console.log(`  ‚è≠Ô∏è  Round already executed for garden #${gardenId}`);
      return;
    }

    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π seed
    const revealSeed = ethers.hexlify(ethers.randomBytes(32));
    const seedHash = ethers.keccak256(revealSeed);

    console.log(`  üîê Committing round...`);
    
    // 2. Commit
    const commitTx = await orchestrator.commitRound(gardenId, roundId, seedHash);
    await commitTx.wait();
    console.log(`  ‚úÖ Round committed (tx: ${commitTx.hash.slice(0, 10)}...)`);

    // 3. Execute (reveal)
    console.log(`  üé≤ Executing round...`);
    const executeTx = await orchestrator.executeRound(gardenId, roundId, revealSeed);
    const receipt = await executeTx.wait();
    
    // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è
    const events = receipt?.logs || [];
    console.log(`  ‚úÖ Round executed (tx: ${executeTx.hash.slice(0, 10)}...)`);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const result = await orchestrator.getRoundResult(gardenId, roundId);
    const updatedGarden = await orchestrator.getGarden(gardenId);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const eventTypes = ["NONE", "LOCUSTS", "WIND", "RAIN", "DROUGHT", "FROST", "SUNSTORM", "PESTS"];
    const eventType = eventTypes[result.eventData.eventType] || "UNKNOWN";
    
    console.log(`     üìÖ Event: ${eventType} (severity: ${result.eventData.severity}/1000)`);
    console.log(`     üíö Health: ${updatedGarden.totalHealth}/1000 (Œî${result.effectResult.healthDelta})`);
    console.log(`     üå± Growth: ${updatedGarden.totalGrowth}/1000 (Œî${result.effectResult.growthDelta})`);
    console.log(`     üí∞ Yield modifier: ${result.effectResult.yieldModifier/10}%`);

  } catch (error: any) {
    if (error.message.includes("Round already committed") || 
        error.message.includes("Round already executed")) {
      console.log(`  ‚è≠Ô∏è  Round already processed`);
    } else {
      throw error;
    }
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è sleep
 */
function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGINT', () => {
  console.log('\n\nüõë Keeper stopped by user');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\nüõë Keeper terminated');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
